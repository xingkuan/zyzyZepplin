{
  "paragraphs": [
    {
      "title": "create info_src record",
      "text": "import codecs\nimport re\nimport psycopg2\n\n# infobots are to be stored in a database, to be furtuer parsed into finer infobot    \nconn \u003d psycopg2.connect(database\u003d\"infostg\", user\u003d\"postgres\", password\u003d\"post\", host\u003d\"127.0.0.1\", port\u003d\"5432\")\n#print(\"Database opened successfully\")\ncur \u003d conn.cursor()\nsql \u003d \"\"\"INSERT INTO info_src(id, name, meta)\n        VALUES(1, \u0027本草纲目\u0027, \u0027{\"排版\":\"金陵版\",\"出版者\":\"人民卫生出版社\"}\u0027) ;\"\"\"\n\ncur.execute(sql)\n\nconn.commit()\ncur.close()\nconn.close()",
      "user": "anonymous",
      "dateUpdated": "2021-03-11 21:37:12.432",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "lineNumbers": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1615512547400_2066949364",
      "id": "paragraph_1615512547400_2066949364",
      "dateCreated": "2021-03-11 17:29:07.400",
      "dateStarted": "2021-03-11 17:44:40.422",
      "dateFinished": "2021-03-11 17:44:40.449",
      "status": "FINISHED"
    },
    {
      "title": "input File",
      "text": "iFile \u003d z.input(\"iFile\")\nz.put(\"fileName\", iFile)",
      "user": "anonymous",
      "dateUpdated": "2021-05-03 17:53:43.110",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "editorHide": true,
        "tableHide": true
      },
      "settings": {
        "params": {
          "iFile": "/home/celine/SHARED/LinuxWS/ZhongYi/bencaoganmu/Data/viEdited/22grass_1.txt"
        },
        "forms": {
          "iFile": {
            "type": "TextBox",
            "name": "iFile",
            "displayName": "iFile",
            "defaultValue": "",
            "hidden": false
          }
        }
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1604093612573_1209585539",
      "id": "paragraph_1604093612573_1209585539",
      "dateCreated": "2020-10-30 14:33:32.573",
      "dateStarted": "2021-05-03 17:53:43.120",
      "dateFinished": "2021-05-03 17:53:43.133",
      "status": "FINISHED"
    },
    {
      "title": "functions",
      "text": "import psycopg2\n\n# extrac chapter number from file name, which is to be used in the infobot name\ndef getChpNum(fileName):\n    nParts \u003d fileName.rsplit(\u0027/\u0027,1)\n    chpN \u003d nParts[1]    #eg: 02intro_1.txt\n    #print(chpN[0:2])        \n    return int(chpN[:2])    #  int(\u002702\u0027) \u003d\u003d\u003e2\n\n#For本草纲目,divide the info into 4 layers, and the id is constructed as\n#  chNum*1000000 + divNum*10000 + bNum*100 + b2Num\ndef genSeq(chNum, pathSpec):\n    seqs \u003d list(map(lambda x: int(x[\u0027sequence\u0027]), pathSpec))\n    print(seqs)\n    for i in range(len(seqs),4):\n        seqs.append(0)\n    print(seqs)\n    return chNum*1000000000 + seqs[0]*1000000 + seqs[1]*10000 + seqs[2]*100 + seqs[3]\n\ndef saveDB(seq, name, meta, content):\n    sql \u003d \"\"\"INSERT INTO info_stg(src_id, seq, name, meta, version, content)\n        VALUES(1, %s, %s, %s, 0, %s) ;\"\"\"\n    conn \u003d psycopg2.connect(database\u003d\"infostg\", user\u003d\"postgres\", password\u003d\"post\", host\u003d\"127.0.0.1\", port\u003d\"5432\")\n    cur \u003d conn.cursor()\n    cur.execute(sql, (seq, name, meta, content))\n    conn.commit()\n    cur.close()\n    conn.close()",
      "user": "anonymous",
      "dateUpdated": "2021-05-03 17:21:28.334",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "lineNumbers": true,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1615527580682_952640392",
      "id": "paragraph_1615527580682_952640392",
      "dateCreated": "2021-03-11 21:39:40.683",
      "dateStarted": "2021-05-03 16:52:01.314",
      "dateFinished": "2021-05-03 16:52:01.330",
      "status": "FINISHED"
    },
    {
      "title": "devel",
      "text": "import codecs\nimport re\nimport psycopg2\nimport json\n\nimport random\nimport string\n\n#iFile \u003d z.input(\"iFile\")\niFile \u003d z.get(\"fileName\")\nlevelTarget\u003d0\npath_spec\u003d[]\nlState\u003d-1  #-1: skip; 0: include; 1: begining; 2: ending\nvContent \u003d \"\"\nins\u003dNone\nvSource \u003d u\"《本草纲目》\"\noFileName \u003d \"\"\n\nemptyLnCnt \u003d 0\n\ndef initPathSpec(n):\n    global path_spec\n    path_spec.clear()\n    for i in range(n+1):\n        temp\u003d{\u0027title\u0027: \u0027\u0027,\n            #  \u0027status\u0027: 0,       #0: n/a; 1: skip, 2: include, 3: last line  \u003d\u003dline status is not part of this structure\n              \u0027sequence\u0027: 0,\n              \u0027meta\u0027:None,\n              \u0027isOpen\u0027: False}    #sequence\n        path_spec.append(temp)\n\n\ndef stage1(line):\n    global lState, path_spec, vContent\n    temp\u003dre.match(\u0027^\u003cb(\\d)(.*)$\u0027, line)   #tag is optional\n    if(temp):\n        #print(temp)\n        level \u003d int(temp.groups()[0])\n        if level \u003e levelTarget:\n            #print(\"Skip \"+ str(level)+\". Should be processed at the next level.\")\n            lState \u003d -1          #-1: skip;     0: include;       1: begining;         2: ending\n            return True\n        else:\n            title \u003d temp.groups()[1].strip()\n            meta \u003d None\n            temp1\u003dre.match(\"(.*)\u003c(.*)\u003e\", title)\n            if temp1:\n                title \u003d temp1.groups()[0].strip()\n                meta \u003d temp1.groups()[1].strip()\n            #print(level, title, tag)    \n            path_spec[level][\"title\"]\u003dtitle\n            path_spec[level][\"meta\"]\u003dmeta\n            path_spec[level][\"sequence\"] +\u003d1\n            if path_spec[level][\"isOpen\"]:\n                print(\"ERROR: looks like tag \"+str(level)+\"is open already!\")\n                print(line)\n                return False\n            print(\"open \"+str(level))\n            path_spec[level][\"isOpen\"]\u003dTrue\n            if (level\u003d\u003dlevelTarget):\n                lState\u003d1\n            else:   #parent changed, so reset the sequence number\n                path_spec[levelTarget][\"sequence\"]\u003d0   \n            return True\n    temp\u003dre.match(\u0027b(\\d)\u003e\u0027, line)   #tag is optional\n    if(temp):\n        level \u003d int(temp.groups()[0])\n        if level \u003e levelTarget + 1:\n            return True\n        elif level \u003d\u003d levelTarget+1:  #this way, lines divided by childrens can be consolidated into a contigueous one\n            lState\u003d-2\n        else:\n            if not path_spec[level][\"isOpen\"]:\n                print(\"Error: perhaps missing open tag for this closing tag \" + str(level))\n                print(line)\n                return False\n            print(\"closing \"+str(level))\n            path_spec[level][\"isOpen\"]\u003dFalse\n            if(level\u003d\u003dlevelTarget):    \n                lState\u003d2\n            return True\n    #content line, just return\n    return True\n        \ndef stage2(line):\n    global lState, path_spec, vContent,emptyLnCnt\n    #print(lState)\n    if (lState\u003d\u003d-1):\n        return\n    elif (lState\u003d\u003d-2):\n        lState\u003d0\n\n    elif (lState\u003d\u003d0):\n        if(re.match(\u0027^$\u0027, line)):\n            emptyLnCnt +\u003d 1\n        else:\n            emptyLnCnt \u003d 0\n\n        if (emptyLnCnt \u003e 1):\n            return    # skip consective empty lines\n\n        vContent \u003d vContent + line\n    elif (lState\u003d\u003d1):\n        lState\u003d0\n        vContent \u003d \u0027\u0027\n    elif(lState\u003d\u003d2):\n        path_spec[levelTarget][\"isOpen\"]\u003dFalse\n        lState\u003d-1\n        saveXXX()\n\n    return\n\ndef saveXXX():\n    vSrcFileNum \u003d getChpNum(iFile)\n    print(vSrcFileNum)\n    seq \u003d genSeq(vSrcFileNum, path_spec )\n    title\u003dpath_spec[levelTarget][\u0027title\u0027]\n    #if levelTarget\u003d\u003d0:\n    #    title \u003d path_spec[0][\u0027title\u0027]\n    #else:\n    for i in range(levelTarget-1, 0, -1):\n    #    title \u003d title+\u0027-\u003e\u0027+path_spec[i][\u0027title\u0027]\n        title \u003d path_spec[i][\u0027title\u0027]+\u0027-\u003e\u0027+title\n        print(title)\n    meta \u003d path_spec[levelTarget][\u0027meta\u0027]\n    #print(seq, title, meta)\n    #print(vContent)\n    saveDB(seq, title, meta, vContent)\n        \ndef mainOfSplit(target):\n    global levelTarget, ins, path_spec\n    \n    ins \u003d codecs.open(iFile, \"r\", encoding\u003d\"utf8\")\n\n    levelTarget\u003dtarget\n\n    for line in ins:\n        #print(line)\n        if not stage1(line):\n            break\n        #print(json.dumps(path_spec))\n        #print(lState)\n        stage2(line)\n    print(\"***completed level: \", target)\n    ins.close()\n    return\n\n### main ###\n#mainOfSplit(3)\ndepth\u003d4\nfor i in range(0, depth):\n    print(i)\n    initPathSpec(i)\n    #print(json.dumps(path_spec))\n    mainOfSplit(i)\n",
      "user": "anonymous",
      "dateUpdated": "2021-05-03 17:53:51.043",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "lineNumbers": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "0\nopen 0\nclosing 0\n22\n[1]\n[1, 0, 0, 0]\n***completed level:  0\n1\nopen 0\nopen 1\nclosing 1\n22\n[1, 1]\n[1, 1, 0, 0]\nopen 1\nclosing 1\n22\n[1, 2]\n[1, 2, 0, 0]\nopen 1\nclosing 1\n22\n[1, 3]\n[1, 3, 0, 0]\nopen 1\nclosing 1\n22\n[1, 4]\n[1, 4, 0, 0]\nopen 1\nclosing 1\n22\n[1, 5]\n[1, 5, 0, 0]\nopen 1\nclosing 1\n22\n[1, 6]\n[1, 6, 0, 0]\nopen 1\nclosing 1\n22\n[1, 7]\n[1, 7, 0, 0]\nopen 1\nclosing 1\n22\n[1, 8]\n[1, 8, 0, 0]\nopen 1\nclosing 1\n22\n[1, 9]\n[1, 9, 0, 0]\nopen 1\nclosing 1\n22\n[1, 10]\n[1, 10, 0, 0]\nopen 1\nclosing 1\n22\n[1, 11]\n[1, 11, 0, 0]\nopen 1\nclosing 1\n22\n[1, 12]\n[1, 12, 0, 0]\nopen 1\nclosing 1\n22\n[1, 13]\n[1, 13, 0, 0]\nopen 1\nclosing 1\n22\n[1, 14]\n[1, 14, 0, 0]\nopen 1\nclosing 1\n22\n[1, 15]\n[1, 15, 0, 0]\nopen 1\nclosing 1\n22\n[1, 16]\n[1, 16, 0, 0]\nopen 1\nclosing 1\n22\n[1, 17]\n[1, 17, 0, 0]\nopen 1\nclosing 1\n22\n[1, 18]\n[1, 18, 0, 0]\nopen 1\nclosing 1\n22\n[1, 19]\n[1, 19, 0, 0]\nopen 1\nclosing 1\n22\n[1, 20]\n[1, 20, 0, 0]\nopen 1\nclosing 1\n22\n[1, 21]\n[1, 21, 0, 0]\nopen 1\nclosing 1\n22\n[1, 22]\n[1, 22, 0, 0]\nopen 1\nclosing 1\n22\n[1, 23]\n[1, 23, 0, 0]\nopen 1\nclosing 1\n22\n[1, 24]\n[1, 24, 0, 0]\nopen 1\nclosing 1\n22\n[1, 25]\n[1, 25, 0, 0]\nopen 1\nclosing 1\n22\n[1, 26]\n[1, 26, 0, 0]\nopen 1\nclosing 1\n22\n[1, 27]\n[1, 27, 0, 0]\nopen 1\nclosing 1\n22\n[1, 28]\n[1, 28, 0, 0]\nopen 1\nclosing 1\n22\n[1, 29]\n[1, 29, 0, 0]\nopen 1\nclosing 1\n22\n[1, 30]\n[1, 30, 0, 0]\nopen 1\nclosing 1\n22\n[1, 31]\n[1, 31, 0, 0]\nopen 1\nclosing 1\n22\n[1, 32]\n[1, 32, 0, 0]\nopen 1\nclosing 1\n22\n[1, 33]\n[1, 33, 0, 0]\nclosing 0\n***completed level:  1\n2\nopen 0\nopen 1\nopen 2\nclosing 2\n22\n[1, 1, 1]\n[1, 1, 1, 0]\n甘草-\u003e根\nopen 2\nclosing 2\n22\n[1, 1, 2]\n[1, 1, 2, 0]\n甘草-\u003e稍\nopen 2\nclosing 2\n22\n[1, 1, 3]\n[1, 1, 3, 0]\n甘草-\u003e头\nclosing 1\nopen 1\nopen 2\nclosing 2\n22\n[1, 2, 1]\n[1, 2, 1, 0]\n黄耆-\u003e根\nopen 2\nclosing 2\n22\n[1, 2, 2]\n[1, 2, 2, 0]\n黄耆-\u003e茎叶\nclosing 1\nopen 1\nopen 2\nclosing 2\n22\n[1, 3, 1]\n[1, 3, 1, 0]\n人参-\u003e根\nopen 2\nclosing 2\n22\n[1, 3, 2]\n[1, 3, 2, 0]\n人参-\u003e芦\nclosing 1\nopen 1\nopen 2\nclosing 2\n22\n[1, 4, 1]\n[1, 4, 1, 0]\nwei-\u003e根\nopen 2\nclosing 2\n22\n[1, 4, 2]\n[1, 4, 2, 0]\nwei-\u003e笋\nopen 2\nclosing 2\n22\n[1, 4, 3]\n[1, 4, 3, 0]\nwei-\u003e茎、叶\nopen 2\nclosing 2\n22\n[1, 4, 4]\n[1, 4, 4, 0]\nwei-\u003e江\nopen 2\nclosing 2\n22\n[1, 4, 5]\n[1, 4, 5, 0]\nwei-\u003e蓬\nopen 2\nclosing 2\n22\n[1, 4, 6]\n[1, 4, 6, 0]\nwei-\u003e烧\nclosing 1\nopen 1\nopen 2\nclosing 2\n22\n[1, 5, 1]\n[1, 5, 1, 0]\n沙参-\u003e根\nclosing 1\nopen 1\nopen 2\nclosing 2\n22\n[1, 6, 1]\n[1, 6, 1, 0]\n荠尼-\u003e根\nclosing 1\nopen 1\nopen 2\nclosing 2\n22\n[1, 7, 1]\n[1, 7, 1, 0]\n???-\u003e\u003e茎叶\nopen 2\nclosing 2\n22\n[1, 7, 2]\n[1, 7, 2, 0]\n???-\u003e\u003e根、叶\nopen 2\nclosing 2\n22\n[1, 7, 3]\n[1, 7, 3, 0]\n???-\u003e???\nopen 2\nclosing 2\n22\n[1, 7, 4]\n[1, 7, 4, 0]\n???-\u003e\u003e花\nopen 2\nclosing 2\n22\n[1, 7, 5]\n[1, 7, 5, 0]\n???-\u003e隐忍叶\nclosing 1\nopen 1\nopen 2\nclosing 2\n22\n[1, 8, 1]\n[1, 8, 1, 0]\n桔梗-\u003e根\nopen 2\nclosing 2\n22\n[1, 8, 2]\n[1, 8, 2, 0]\n桔梗-\u003e芦头\nclosing 1\nopen 1\nopen 2\nclosing 2\n22\n[1, 9, 1]\n[1, 9, 1, 0]\n长松-\u003e根\nclosing 1\nopen 1\nopen 2\nclosing 2\n22\n[1, 10, 1]\n[1, 10, 1, 0]\n黄精-\u003e根\nclosing 1\nopen 1\nopen 2\nclosing 2\n22\n[1, 11, 1]\n[1, 11, 1, 0]\n葳蕤-\u003e根\nclosing 1\nopen 1\nopen 2\nclosing 2\n22\n[1, 12, 1]\n[1, 12, 1, 0]\n知母-\u003e根\nclosing 1\nopen 1\nclosing 1\nopen 1\nopen 2\nclosing 2\n22\n[1, 14, 1]\n[1, 14, 1, 0]\n列当-\u003e根\nclosing 1\nopen 1\nclosing 1\nopen 1\nopen 2\nclosing 2\n22\n[1, 16, 1]\n[1, 16, 1, 0]\n天麻-\u003e赤箭\nopen 2\nclosing 2\n22\n[1, 16, 2]\n[1, 16, 2, 0]\n天麻-\u003e还筒子\nclosing 1\nopen 1\nopen 2\nclosing 2\n22\n[1, 17, 1]\n[1, 17, 1, 0]\n术-\u003e术\nopen 2\nclosing 2\n22\n[1, 17, 2]\n[1, 17, 2, 0]\n术-\u003e苍术\nopen 2\nclosing 2\n22\n[1, 17, 3]\n[1, 17, 3, 0]\n术-\u003e苗\nclosing 1\nopen 1\nopen 2\nclosing 2\n22\n[1, 18, 1]\n[1, 18, 1, 0]\n狗脊-\u003e根\nclosing 1\nopen 1\nopen 2\nclosing 2\n22\n[1, 19, 1]\n[1, 19, 1, 0]\n贯众-\u003e根\nopen 2\nclosing 2\n22\n[1, 19, 2]\n[1, 19, 2, 0]\n贯众-\u003e花\nclosing 1\nopen 1\nopen 2\nclosing 2\n22\n[1, 20, 1]\n[1, 20, 1, 0]\n巴戟天-\u003e根\nclosing 1\nopen 1\nopen 2\nclosing 2\n22\n[1, 21, 1]\n[1, 21, 1, 0]\n远志-\u003e根\nopen 2\nclosing 2\n22\n[1, 21, 2]\n[1, 21, 2, 0]\n远志-\u003e叶\nclosing 1\nopen 1\nopen 2\nclosing 2\n22\n[1, 22, 1]\n[1, 22, 1, 0]\n百脉根-\u003e根\nclosing 1\nopen 1\nopen 2\nclosing 2\n22\n[1, 23, 1]\n[1, 23, 1, 0]\n淫羊藿-\u003e根叶\nclosing 1\nopen 1\nopen 2\nclosing 2\n22\n[1, 24, 1]\n[1, 24, 1, 0]\n仙茅-\u003e根\nclosing 1\nopen 1\nopen 2\nclosing 2\n22\n[1, 25, 1]\n[1, 25, 1, 0]\n玄参-\u003e根\nclosing 1\nopen 1\nopen 2\nclosing 2\n22\n[1, 26, 1]\n[1, 26, 1, 0]\n地榆-\u003e根\nopen 2\nclosing 2\n22\n[1, 26, 2]\n[1, 26, 2, 0]\n地榆-\u003e叶\nclosing 1\nopen 1\nopen 2\nclosing 2\n22\n[1, 27, 1]\n[1, 27, 1, 0]\n丹参-\u003e根\nclosing 1\nopen 1\nopen 2\nclosing 2\n22\n[1, 28, 1]\n[1, 28, 1, 0]\n紫参-\u003e根\nclosing 1\nopen 1\nopen 2\nclosing 2\n22\n[1, 29, 1]\n[1, 29, 1, 0]\n王孙-\u003e根\nclosing 1\nopen 1\nopen 2\nclosing 2\n22\n[1, 30, 1]\n[1, 30, 1, 0]\n紫草-\u003e根\nclosing 1\nopen 1\nopen 2\nclosing 2\n22\n[1, 31, 1]\n[1, 31, 1, 0]\n白头翁-\u003e根\nopen 2\nclosing 2\n22\n[1, 31, 2]\n[1, 31, 2, 0]\n白头翁-\u003e花\nclosing 1\nopen 1\nopen 2\nclosing 2\n22\n[1, 32, 1]\n[1, 32, 1, 0]\n白芨-\u003e根\nopen 2\nclosing 2\n22\n[1, 32, 2]\n[1, 32, 2, 0]\n白芨-\u003e白给\nclosing 1\nopen 1\nopen 2\nclosing 2\n22\n[1, 33, 1]\n[1, 33, 1, 0]\n三七-\u003e根\nopen 2\nclosing 2\n22\n[1, 33, 2]\n[1, 33, 2, 0]\n三七-\u003e叶\nclosing 1\nclosing 0\n***completed level:  2\n3\nopen 0\nopen 1\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nclosing 1\nopen 1\nopen 2\nclosing 2\nopen 2\nclosing 2\nclosing 1\nopen 1\nopen 2\nclosing 2\nopen 2\nclosing 2\nclosing 1\nopen 1\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nclosing 1\nopen 1\nopen 2\nclosing 2\nclosing 1\nopen 1\nopen 2\nclosing 2\nclosing 1\nopen 1\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nclosing 1\nopen 1\nopen 2\nclosing 2\nopen 2\nclosing 2\nclosing 1\nopen 1\nopen 2\nclosing 2\nclosing 1\nopen 1\nopen 2\nclosing 2\nclosing 1\nopen 1\nopen 2\nclosing 2\nclosing 1\nopen 1\nopen 2\nclosing 2\nclosing 1\nopen 1\nclosing 1\nopen 1\nopen 2\nclosing 2\nclosing 1\nopen 1\nclosing 1\nopen 1\nopen 2\nclosing 2\nopen 2\nclosing 2\nclosing 1\nopen 1\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nclosing 1\nopen 1\nopen 2\nclosing 2\nclosing 1\nopen 1\nopen 2\nclosing 2\nopen 2\nclosing 2\nclosing 1\nopen 1\nopen 2\nclosing 2\nclosing 1\nopen 1\nopen 2\nclosing 2\nopen 2\nclosing 2\nclosing 1\nopen 1\nopen 2\nclosing 2\nclosing 1\nopen 1\nopen 2\nclosing 2\nclosing 1\nopen 1\nopen 2\nclosing 2\nclosing 1\nopen 1\nopen 2\nclosing 2\nclosing 1\nopen 1\nopen 2\nclosing 2\nopen 2\nclosing 2\nclosing 1\nopen 1\nopen 2\nclosing 2\nclosing 1\nopen 1\nopen 2\nclosing 2\nclosing 1\nopen 1\nopen 2\nclosing 2\nclosing 1\nopen 1\nopen 2\nclosing 2\nclosing 1\nopen 1\nopen 2\nclosing 2\nopen 2\nclosing 2\nclosing 1\nopen 1\nopen 2\nclosing 2\nopen 2\nclosing 2\nclosing 1\nopen 1\nopen 2\nclosing 2\nopen 2\nclosing 2\nclosing 1\nclosing 0\n***completed level:  3\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1618699928621_192107703",
      "id": "paragraph_1618699928621_192107703",
      "dateCreated": "2021-04-17 15:52:08.622",
      "dateStarted": "2021-05-03 17:53:51.056",
      "dateFinished": "2021-05-03 17:53:52.447",
      "status": "FINISHED"
    },
    {
      "title": "xd (\u003cd...d\u003e)",
      "text": "\nimport codecs\nimport re\n#import psycopg2\n\nimport random\nimport string\nimport json\n\n\n# extract chapter title and tag if there is one \ndef parseTitleAndMeta(pattern, str):\n    #print(pattern)\n    #print(str)\n    temp \u003d re.match(pattern+\u0027(.*?)\u003c(.*)\u003e$\u0027, str)\n    if temp:\n        tl \u003d temp.group(1).strip()\n        tg \u003d temp.group(2).strip()\n        return (tl, tg)\n    \n    temp \u003d re.match(pattern+\u0027(.*?)$\u0027, str)\n    if temp:\n        tl \u003d re.sub(r\"\\s+\", \"\", temp.group(1))\n        return (tl, None)\n    return None        \n\n# a random string to make infobot ID more likely to be unique.    \ndef gen_random_string(length):\n    letters \u003d string.ascii_lowercase\n    result_str \u003d \u0027\u0027.join(random.choice(letters) for i in range(length))\n    return result_str\n\n\n#iFile \u003d z.input(\"iFile\")\niFile \u003d z.get(\"fileName\")\nins \u003d codecs.open(iFile, \"r\", encoding\u003d\"utf8\")\n\nvInclude \u003d False\n\nvChpNum \u003d getChpNum(iFile)\n#vId \u003d None\n#vParentId \u003d None\nvVer \u003d 0\nvVNum \u003d 0\nvTitleNTagD \u003d (\u0027\u0027, \u0027\u0027)\nvContent \u003d \"\"\n#vSource \u003d u\"《本草纲目》\"\noFileName \u003d \"\"\n\nemptyLnCnt \u003d 0\n\nfor line in ins:\n    #print(vSkip)\n    #skip the lines between \u003cx and x\u003e\n    if ( re.match(\u0027^d\u003e\u0027, line) ):\n        #title \u003d vSource + \"_\" + vTitleNTagD[0] \n        title \u003d vTitleNTagD[0] \n        #id \u003d vSource + \"_\" + vChpNum + \"_\" +  format(vVNum, \u002703\u0027) + \"_\"  \\\n        #    + gen_random_string(3)\n        seq \u003d genSeq(int(vChpNum), vVNum )\n        print(seq)\n        tg \u003d vTitleNTagD[1]\n        print(title)\n        #print(id)\n        print(tg)\n        print(vContent)\n        #cur.execute(sql, (vVNum, title, vSource, tg, vVer, vContent))\n        meta\u003dNone\n        if tg:\n            tg \u003d re.sub(\u0027^|$\u0027, \u0027\"\u0027, tg)\n            tg \u003d re.sub(\u0027([:,])\u0027, r\u0027\"\\1\"\u0027, tg)\n            print(tg)\n            #meta \u003d json.loads(\u0027{\u0027 + tg + \u0027}\u0027);\n            meta \u003d \u0027{\u0027 + tg + \u0027}\u0027;\n        print(meta)\n        saveDB(seq, title, meta, vContent)\n\n        vInclude \u003d False\n        vContent \u003d \"\"\n        continue\n    \n    if ( re.match(\u0027^\u003cd\u0027, line) ):\n        vVNum +\u003d 1\n        vInclude \u003d True\n        #oFileName \u003d \"03\" + \"_\" + str(chpNum).zfill(3) + \".txt\"\n        vTitleNTagD \u003d parseTitleAndMeta(\u0027^\u003cd\u0027, line)\n        continue\n    if ( re.match(\u0027^d\u003e\u0027, line) ):\n        vInclude \u003d False\n        continue\n\n    # anything belongs the lower level blocks are not to be included here.\n    if ( re.match(\u0027^\u003cb[012]\u0027, line) ): \n        vInclude \u003d False\n        continue\n    if ( re.match(\u0027^b[01]\u003e\u0027, line) ): \n        vInclude \u003d True\n        continue\n\n    if ( vInclude ):\n        if(re.match(\u0027^$\u0027, line)):\n            emptyLnCnt +\u003d 1\n        else:\n            emptyLnCnt \u003d 0\n        if (emptyLnCnt \u003e 2):\n            continue\n        \n        vContent \u003d vContent + line\n\n#conn.commit()\n#cur.close()\n#conn.close()",
      "user": "anonymous",
      "dateUpdated": "2021-04-21 10:06:22.998",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "lineNumbers": false,
        "editorHide": true,
        "tableHide": true
      },
      "settings": {
        "params": {
          "iFile": "/home/celine/SHARED/LinuxWS/ZhongYi/bencaoganmu/Data/viEdited/02prefix_2.txt"
        },
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "Unexpected exception: java.lang.RuntimeException: java.lang.InterruptedException: sleep interrupted\n\tat org.apache.zeppelin.notebook.Paragraph.execute(Paragraph.java:353)\n\tat org.apache.zeppelin.notebook.Note.run(Note.java:857)\n\tat org.apache.zeppelin.service.NotebookService.runParagraph(NotebookService.java:356)\n\tat org.apache.zeppelin.service.NotebookService.runAllParagraphs(NotebookService.java:412)\n\tat org.apache.zeppelin.socket.NotebookServer.runAllParagraphs(NotebookServer.java:1486)\n\tat org.apache.zeppelin.socket.NotebookServer.onMessage(NotebookServer.java:357)\n\tat org.apache.zeppelin.socket.NotebookSocket.onWebSocketText(NotebookSocket.java:58)\n\tat org.eclipse.jetty.websocket.common.events.JettyListenerEventDriver.onTextMessage(JettyListenerEventDriver.java:231)\n\tat org.eclipse.jetty.websocket.common.message.SimpleTextMessage.messageComplete(SimpleTextMessage.java:69)\n\tat org.eclipse.jetty.websocket.common.events.AbstractEventDriver.appendMessage(AbstractEventDriver.java:65)\n\tat org.eclipse.jetty.websocket.common.events.JettyListenerEventDriver.onTextFrame(JettyListenerEventDriver.java:179)\n\tat org.eclipse.jetty.websocket.common.events.AbstractEventDriver.incomingFrame(AbstractEventDriver.java:150)\n\tat org.eclipse.jetty.websocket.common.WebSocketSession.incomingFrame(WebSocketSession.java:322)\n\tat org.eclipse.jetty.websocket.common.extensions.AbstractExtension.nextIncomingFrame(AbstractExtension.java:147)\n\tat org.eclipse.jetty.websocket.common.extensions.compress.PerMessageDeflateExtension.nextIncomingFrame(PerMessageDeflateExtension.java:112)\n\tat org.eclipse.jetty.websocket.common.extensions.compress.CompressExtension.forwardIncoming(CompressExtension.java:168)\n\tat org.eclipse.jetty.websocket.common.extensions.compress.PerMessageDeflateExtension.incomingFrame(PerMessageDeflateExtension.java:92)\n\tat org.eclipse.jetty.websocket.common.extensions.ExtensionStack.incomingFrame(ExtensionStack.java:202)\n\tat org.eclipse.jetty.websocket.common.Parser.notifyFrame(Parser.java:225)\n\tat org.eclipse.jetty.websocket.common.Parser.parseSingleFrame(Parser.java:259)\n\tat org.eclipse.jetty.websocket.common.io.AbstractWebSocketConnection.onFillable(AbstractWebSocketConnection.java:460)\n\tat org.eclipse.jetty.websocket.common.io.AbstractWebSocketConnection.onFillable(AbstractWebSocketConnection.java:441)\n\tat org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:311)\n\tat org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103)\n\tat org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:117)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:806)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:938)\n\tat java.base/java.lang.Thread.run(Thread.java:834)\nCaused by: java.lang.InterruptedException: sleep interrupted\n\tat java.base/java.lang.Thread.sleep(Native Method)\n\tat org.apache.zeppelin.notebook.Paragraph.execute(Paragraph.java:351)\n\t... 27 more\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1603145541708_145726727",
      "id": "paragraph_1603145541708_145726727",
      "dateCreated": "2020-10-19 15:12:21.708",
      "dateStarted": "2021-04-16 21:06:19.993",
      "dateFinished": "2021-04-16 21:06:20.640",
      "status": "ERROR"
    },
    {
      "title": "xb[01] (\u003cbn ... nb\u003e)",
      "text": "import codecs\nimport re\nimport psycopg2\n\nimport random\nimport string\n\n## extrac chapter number from file name, which is to be used in the infobot name\n#def getChpNum(fileName):\n#    nParts \u003d fileName.rsplit(\u0027/\u0027,1)\n#    chpN \u003d nParts[1]\n#    return chpN[:2]\n a random string to make infobot ID more likely to be unique.    \ndef gen_random_string(length):\n    letters \u003d string.ascii_lowercase\n    result_str \u003d \u0027\u0027.join(random.choice(letters) for i in range(length))\n    return result_str\n\n# extract chapter title and tag if there is one \n#def parseTitleAndTag(pattern, str):\n#    #print(pattern)\n#    #print(str)\n#    temp \u003d re.match(pattern+\u0027(.*?)tag:(.*)$\u0027, str)\n#    #print(temp)\n#    if temp:\n#        tl \u003d temp.group(1).strip()\n#        tg \u003d temp.group(2).strip()\n#        #print(tl, tg)\n#        return (tl, tg)\n#    \n#    temp \u003d re.match(pattern+\u0027(.*?)$\u0027, str)\n#    if temp:\n#        tl \u003d re.sub(r\"\\s+\", \"\", temp.group(1))\n#        return (tl, None)\n#\n#    return None        \n    \n\n# infobots are to be stored in a database, to be furtuer parsed into finer infobot    \n#conn \u003d psycopg2.connect(database\u003d\"notes\", user\u003d\"postgres\", password\u003d\"post\", host\u003d\"127.0.0.1\", port\u003d\"5432\")\n#print(\"Database opened successfully\")\n#cur \u003d conn.cursor()\n#sql \u003d \"\"\"INSERT INTO infobot(id, title, source, tags, version, content)\n#        VALUES(%s, %s, %s, %s, %s, %s) ;\"\"\"\n\n\n#iFile \u003d z.input(\"iFile\")\niFile \u003d z.get(\"fileName\")\nins \u003d codecs.open(iFile, \"r\", encoding\u003d\"utf8\")\n\nvInclude \u003d False\n\nvChpNum \u003d getChpNum(iFile)\n#vId \u003d None\n#vParentId \u003d None\nvVer \u003d 0\nvVNum \u003d 0\nvBNum \u003d 0\nvTitleNTagD \u003d (\u0027\u0027, \u0027\u0027)\nvTitleNTagB \u003d (\u0027\u0027, \u0027\u0027)\nvContent \u003d \"\"\nvSource \u003d u\"《本草纲目》\"\noFileName \u003d \"\"\n\nemptyLnCnt \u003d 0\n\nfor line in ins:\n    #print(vSkip)\n    #skip the lines between \u003cx and x\u003e\n    if ( re.match(\u0027^d\u003e\u0027, line) ):\n        vInclude \u003d False\n        vBNum \u003d 0   #reset block number\n        continue\n    \n    if ( re.match(\u0027^\u003cd\u0027, line) ):\n        vVNum +\u003d 1\n        vTitleNTagD \u003d parseTitleAndTag(\u0027^\u003cd\u0027, line)\n        continue\n\n    # b2 blocks are excluded here.\n    if ( re.match(\u0027^\u003cb2\u0027, line) ):\n        vInclude \u003d False\n        continue\n    if ( re.match(\u0027^b2\u003e\u0027, line) ): \n        vInclude \u003d True\n        continue\n\n\n    # extract b0 or b1\n    if ( re.match(\u0027^\u003cb[01]\u0027, line) ): \n        vInclude \u003d True\n        vBNum +\u003d 1\n        vTitleNTagB \u003d parseTitleAndTag(\u0027^\u003cb[01]\u0027, line)\n        continue\n    if ( re.match(\u0027^b[01]\u003e\u0027, line) ): \n        title \u003d vSource + \"_\" + vTitleNTagD[0] + \"_\" + vTitleNTagB[0] \n        id \u003d vSource + \"_\" + vChpNum + \"_\" +  format(vVNum, \u002703\u0027) + \"_\"  \\\n            +  format(vBNum, \u002703\u0027) + \"_\" + gen_random_string(3)\n        tg \u003d vTitleNTagB[1]\n        print(title)\n        print(id)\n        print(tg)\n        print(vContent)\n        #cur.execute(sql, (id, title, vSource, tg, vVer, vContent))\n        saveDB(seq, title, meta, vContent)\n        \n        vInclude \u003d False\n        vContent \u003d \"\"\n        continue\n    \n    if ( vInclude ):\n        if(re.match(\u0027^$\u0027, line)):\n            emptyLnCnt +\u003d 1\n        else:\n            emptyLnCnt \u003d 0\n        if (emptyLnCnt \u003e 2):\n            continue\n        vContent \u003d vContent + line\n\n#conn.commit()\n#cur.close()\n#conn.close()",
      "user": "anonymous",
      "dateUpdated": "2021-04-21 09:57:00.267",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "lineNumbers": true,
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {
          "iFile": "/home/celine/SHARED/LinuxWS/ZhongYi/bencaoganmu/Data/viEdited/02prefix_2.txt"
        },
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1603150517284_939972994",
      "id": "paragraph_1603150517284_939972994",
      "dateCreated": "2020-10-19 16:35:17.284",
      "dateStarted": "2021-04-16 21:06:46.337",
      "dateFinished": "2021-04-16 21:06:47.311",
      "status": "FINISHED"
    },
    {
      "title": "xb2 ",
      "text": "import codecs\nimport re\nimport psycopg2\n\nimport random\nimport string\n\n# extrac chapter number from file name, which is to be used in the infobot name\ndef getChpNum(fileName):\n    nParts \u003d fileName.rsplit(\u0027/\u0027,1)\n    chpN \u003d nParts[1]\n    return chpN[:2]\n# a random string to make infobot ID more likely to be unique.    \ndef gen_random_string(length):\n    letters \u003d string.ascii_lowercase\n    result_str \u003d \u0027\u0027.join(random.choice(letters) for i in range(length))\n    return result_str\n\n## extract chapter title and tag if there is one \n#def parseTitleAndTag(pattern, str):\n#    #print(pattern)\n#    #print(str)\n#    temp \u003d re.match(pattern+\u0027(.*?)tag:(.*)$\u0027, str)\n#    #print(temp)\n#    if temp:\n#        tl \u003d temp.group(1).strip()\n#        tg \u003d temp.group(2).strip()\n#        #print(tl, tg)\n#        return (tl, tg)\n#    \n#    temp \u003d re.match(pattern+\u0027(.*?)$\u0027, str)\n#    if temp:\n#        tl \u003d re.sub(r\"\\s+\", \"\", temp.group(1))\n#        return (tl, None)\n#\n#    return None        \n\n# infobots are to be stored in a database, to be furtuer parsed into finer infobot    \nconn \u003d psycopg2.connect(database\u003d\"notes\", user\u003d\"postgres\", password\u003d\"post\", host\u003d\"127.0.0.1\", port\u003d\"5432\")\n#print(\"Database opened successfully\")\ncur \u003d conn.cursor()\nsql \u003d \"\"\"INSERT INTO infobot(id, title, source, tags, version, content)\n        VALUES(%s, %s, %s, %s, %s, %s) ;\"\"\"\n\n\n#iFile \u003d z.input(\"iFile\")\niFile \u003d z.get(\"fileName\")\nins \u003d codecs.open(iFile, \"r\", encoding\u003d\"utf8\")\n\nvInclude \u003d False\n\nvChpNum \u003d getChpNum(iFile)\n#vId \u003d None\n#vParentId \u003d None\nvVer \u003d 0\nvVNum \u003d 0\nvBNum \u003d 0\nvB2Num \u003d 0\nvTitleNTagD \u003d (\u0027\u0027,\u0027\u0027)\nvTitleNTagB  \u003d (\u0027\u0027,\u0027\u0027)\nvTitleNTagB2  \u003d (\u0027\u0027,\u0027\u0027)\nvContent \u003d \"\"\nvSource \u003d u\"《本草纲目》\"\noFileName \u003d \"\"\n\nemptyLnCnt \u003d 0\n\nfor line in ins:\n    #print(vSkip)\n    #skip the lines between \u003cx and x\u003e\n    if ( re.match(\u0027^d\u003e\u0027, line) ):\n        vInclude \u003d False\n        vBNum \u003d 0   #reset block number\n        continue\n    \n    if ( re.match(\u0027^\u003cd\u0027, line) ):\n        vVNum +\u003d 1\n        #oFileName \u003d \"03\" + \"_\" + str(chpNum).zfill(3) + \".txt\"\n        vTitleNTagD \u003d parseTitleAndTag(\u0027^\u003cd\u0027, line)\n        continue\n\n    # anything belongs the lower level blocks are not to be included here.\n    if ( re.match(\u0027^\u003cb[01]\u0027, line) ): \n        vInclude \u003d False\n        vBNum +\u003d 1\n        vTitleNTagB \u003d parseTitleAndTag(\u0027^\u003cb[01]\u0027, line)\n        continue\n    if ( re.match(\u0027^b[01]\u003e\u0027, line) ): \n        vB2Num \u003d 0   #reset child level block number\n        continue\n\n    # anything belongs to \u003cb2 ... b2\u003e blocks are not to be included here.\n    if ( re.match(\u0027^\u003cb2\u0027, line) ): \n        vInclude \u003d True\n        vB2Num +\u003d 1\n        vTitleNTagB2 \u003d parseTitleAndTag(\u0027^\u003cb2\u0027, line)\n        continue\n    if ( re.match(\u0027^b2\u003e\u0027, line) ): \n        title \u003d vSource + \"_\" + vTitleNTagD[0] + \"_\" + vTitleNTagB[0] + \"_\" + vTitleNTagB2[0] \n        id \u003d vSource + \"_\" + vChpNum \\\n            + \"_\" +  format(vVNum, \u002703\u0027)  \\\n            + \"_\" + format(vBNum, \u002703\u0027)   \\\n            + \"_\" + format(vB2Num, \u002703\u0027) + \"_\" + gen_random_string(3)\n        tg \u003d vTitleNTagB2[1]\n        print(title)\n        print(id)\n        print(tg)\n        print(vContent)\n        cur.execute(sql, (id, title, vSource, tg, vVer, vContent))\n\n        vInclude \u003d False\n        vContent \u003d \"\"\n        continue\n\n    \n    if ( vInclude ):\n        if(re.match(\u0027^$\u0027, line)):\n            emptyLnCnt +\u003d 1\n        else:\n            emptyLnCnt \u003d 0\n        if (emptyLnCnt \u003e 2):\n            continue\n        vContent \u003d vContent + line\n\nconn.commit()\ncur.close()\nconn.close()",
      "user": "anonymous",
      "dateUpdated": "2021-04-20 12:14:59.976",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "lineNumbers": true,
        "title": true,
        "editorHide": true,
        "tableHide": true
      },
      "settings": {
        "params": {
          "iFile": "/home/celine/SHARED/LinuxWS/ZhongYi/bencaoganmu/Data/viEdited/02prefix_2.txt"
        },
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1603163681826_1071893464",
      "id": "paragraph_1603163681826_1071893464",
      "dateCreated": "2020-10-19 20:14:41.826",
      "dateStarted": "2021-04-15 20:17:15.664",
      "dateFinished": "2021-04-15 20:17:15.778",
      "status": "FINISHED"
    }
  ],
  "name": "splitBCGM",
  "id": "2FKNG5PMR",
  "defaultInterpreterGroup": "python",
  "version": "0.9.0-preview2",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}