{
  "paragraphs": [
    {
      "title": "create info_src record",
      "text": "import codecs\nimport re\nimport psycopg2\n\n# infobots are to be stored in a database, to be furtuer parsed into finer infobot    \nconn \u003d psycopg2.connect(database\u003d\"infostg\", user\u003d\"postgres\", password\u003d\"post\", host\u003d\"127.0.0.1\", port\u003d\"5432\")\n#print(\"Database opened successfully\")\ncur \u003d conn.cursor()\nsql \u003d \"\"\"INSERT INTO info_src(id, name, meta)\n        VALUES(1, \u0027本草纲目\u0027, \u0027{\"排版\":\"金陵版\",\"出版者\":\"人民卫生出版社\"}\u0027) ;\"\"\"\n\ncur.execute(sql)\n\nconn.commit()\ncur.close()\nconn.close()",
      "user": "anonymous",
      "dateUpdated": "2021-03-11 21:37:12.432",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "lineNumbers": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1615512547400_2066949364",
      "id": "paragraph_1615512547400_2066949364",
      "dateCreated": "2021-03-11 17:29:07.400",
      "dateStarted": "2021-03-11 17:44:40.422",
      "dateFinished": "2021-03-11 17:44:40.449",
      "status": "FINISHED"
    },
    {
      "title": "input File",
      "text": "iFile \u003d z.input(\"iFile\")\nz.put(\"fileName\", iFile)",
      "user": "anonymous",
      "dateUpdated": "2021-04-20 14:21:14.927",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "editorHide": true,
        "tableHide": true
      },
      "settings": {
        "params": {
          "iFile": "/home/celine/SHARED/LinuxWS/ZhongYi/bencaoganmu/Data/viEdited/04prefix_1.txt"
        },
        "forms": {
          "iFile": {
            "type": "TextBox",
            "name": "iFile",
            "displayName": "iFile",
            "defaultValue": "",
            "hidden": false
          }
        }
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1604093612573_1209585539",
      "id": "paragraph_1604093612573_1209585539",
      "dateCreated": "2020-10-30 14:33:32.573",
      "dateStarted": "2021-04-20 14:21:15.012",
      "dateFinished": "2021-04-20 14:21:20.971",
      "status": "FINISHED"
    },
    {
      "title": "functions",
      "text": "import psycopg2\n\n# extrac chapter number from file name, which is to be used in the infobot name\ndef getChpNum(fileName):\n    nParts \u003d fileName.rsplit(\u0027/\u0027,1)\n    chpN \u003d nParts[1]    #eg: 02intro_1.txt\n    #print(chpN[0:2])        \n    return int(chpN[:2])    #  int(\u002702\u0027) \u003d\u003d\u003e2\n\n#For本草纲目,divide the info into 4 layers, and the id is constructed as\n#  chNum*1000000 + divNum*10000 + bNum*100 + b2Num\ndef genSeq(chNum, pathSpec):\n    seqs \u003d list(map(lambda x: int(x[\u0027sequence\u0027]), pathSpec))\n    print(seqs)\n    for i in range(len(seqs),4):\n        seqs.append(0)\n    print(seqs)\n    return chNum*100000000 + seqs[0]*1000000 + seqs[1]*10000 + seqs[2]*100 + seqs[3]\n\ndef saveDB(seq, name, meta, content):\n    sql \u003d \"\"\"INSERT INTO info_stg(src_id, seq, name, meta, version, content)\n        VALUES(1, %s, %s, %s, 0, %s) ;\"\"\"\n    conn \u003d psycopg2.connect(database\u003d\"infostg\", user\u003d\"postgres\", password\u003d\"post\", host\u003d\"127.0.0.1\", port\u003d\"5432\")\n    cur \u003d conn.cursor()\n    cur.execute(sql, (seq, name, meta, content))\n    conn.commit()\n    cur.close()\n    conn.close()",
      "user": "anonymous",
      "dateUpdated": "2021-04-20 14:22:18.500",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "lineNumbers": true,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1615527580682_952640392",
      "id": "paragraph_1615527580682_952640392",
      "dateCreated": "2021-03-11 21:39:40.683",
      "dateStarted": "2021-04-20 14:22:18.508",
      "dateFinished": "2021-04-20 14:22:18.551",
      "status": "FINISHED"
    },
    {
      "title": "devel",
      "text": "import codecs\nimport re\nimport psycopg2\nimport json\n\nimport random\nimport string\n\n#iFile \u003d z.input(\"iFile\")\niFile \u003d z.get(\"fileName\")\nins \u003d codecs.open(iFile, \"r\", encoding\u003d\"utf8\")\n\nlevelTarget\u003d0\npath_spec\u003d[]\nlState\u003d-1  #-1: skip; 0: include; 1: begining; 2: ending\nvContent \u003d \"\"\n\nvSource \u003d u\"《本草纲目》\"\noFileName \u003d \"\"\n\nemptyLnCnt \u003d 0\n\ndef initPathSpec(n):\n    for i in range(n+1):\n        temp\u003d{\u0027title\u0027: \u0027\u0027,\n            #  \u0027status\u0027: 0,       #0: n/a; 1: skip, 2: include, 3: last line  \u003d\u003dline status is not part of this structure\n              \u0027sequence\u0027: 0,\n              \u0027meta\u0027:None,\n              \u0027isOpen\u0027: False}    #sequence\n        path_spec.append(temp)\n\ndef stage1(line):\n    global lState, path_spec, vContent\n    temp\u003dre.match(\u0027^\u003cb(\\d)(.*)$\u0027, line)   #tag is optional\n    if(temp):\n        level \u003d int(temp.groups()[0])\n        if level \u003e levelTarget:\n            print(\"Skip \"+ str(level)+\". Should be processed at the next level.\")\n            lState \u003d -1          #-1: skip;     0: include;       1: begining;         2: ending\n            return\n        else:\n            title \u003d temp.groups()[1].strip()\n            meta \u003d None\n            temp1\u003dre.match(\"(.*)\u003c(.*)\u003e\", title)\n            if temp1:\n                title \u003d temp1.groups()[0].strip()\n                meta \u003d temp1.groups()[1].strip()\n            #print(level, title, tag)    \n            path_spec[level][\"title\"]\u003dtitle\n            path_spec[level][\"meta\"]\u003dmeta\n            path_spec[level][\"sequence\"] +\u003d1\n            if path_spec[level][\"isOpen\"]:\n                pring(\"looks like tag \"+level+\"is open already!\")\n            print(\"open \"+str(level))\n            path_spec[level][\"isOpen\"]\u003dTrue\n            if (level\u003d\u003dlevelTarget):\n                lState\u003d1\n            return \n    temp\u003dre.match(\u0027b(\\d)\u003e\u0027, line)   #tag is optional\n    if(temp):\n        level \u003d int(temp.groups()[0])\n        if level \u003e levelTarget + 1:\n            return\n        elif level \u003d\u003d levelTarget+1:  #this way, lines diveded by childrens can be consolidated into a contigueous one\n            lState\u003d-2\n        else:\n            if not path_spec[level][\"isOpen\"]:\n                print(\"perhaps missing open tag for this closing tag \" + level)\n            print(\"closing \"+str(level))\n            path_spec[level][\"isOpen\"]\u003dFalse\n            if(level\u003d\u003dlevelTarget):    \n                lState\u003d2\n            return\n    #content line, just return\n    return\n        \ndef stage2(line):\n    global lState, path_spec, vContent,emptyLnCnt\n    #print(lState)\n    if (lState\u003d\u003d-1):\n        return\n    elif (lState\u003d\u003d-2):\n        lState\u003d0\n    elif (lState\u003d\u003d0):\n        if(re.match(\u0027^$\u0027, line)):\n            emptyLnCnt +\u003d 1\n        else:\n            emptyLnCnt \u003d 0\n\n        if (emptyLnCnt \u003e 1):\n            return    # skip consective empty lines\n\n        vContent \u003d vContent + line\n    elif (lState\u003d\u003d1):\n        lState\u003d0\n        vContent \u003d \u0027\u0027\n    elif(lState\u003d\u003d2):\n        path_spec[levelTarget][\"isOpen\"]\u003dFalse\n        lState\u003d-1\n        saveXXX()\n\n    return\n\ndef saveXXX():\n    vSrcFileNum \u003d getChpNum(iFile)\n    print(vSrcFileNum)\n    seq \u003d genSeq(vSrcFileNum, path_spec )\n    title \u003d path_spec[levelTarget][\u0027title\u0027]\n    meta \u003d path_spec[levelTarget][\u0027meta\u0027]\n    print(seq, title, meta)\n    #print(vContent)\n    saveDB(seq, title, meta, vContent)\n\ndef mainOfSplit(target):\n    global levelTarget\n    levelTarget\u003dtarget\n    initPathSpec(levelTarget)\n    #print(json.dumps(path_spec))\n\n    for line in ins:\n        #print(line)\n        stage1(line)\n        #print(json.dumps(path_spec))\n        #print(lState)\n        stage2(line)\n\n### main ###\nmainOfSplit(1)\n",
      "user": "anonymous",
      "dateUpdated": "2021-04-20 14:22:28.901",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "lineNumbers": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "open 0\nopen 1\nclosing 1\n4\n[1, 1]\n[1, 1, 0, 0]\n401010000 《神农本草经》 None\nopen 1\nclosing 1\n4\n[1, 2]\n[1, 2, 0, 0]\n401020000 《名医别录》 None\nopen 1\nclosing 1\n4\n[1, 3]\n[1, 3, 0, 0]\n401030000 《桐君采药录》 None\nopen 1\nclosing 1\n4\n[1, 4]\n[1, 4, 0, 0]\n401040000 《雷公药对》 None\nopen 1\nclosing 1\n4\n[1, 5]\n[1, 5, 0, 0]\n401050000 《吴氏本草》 None\nopen 1\nclosing 1\n4\n[1, 6]\n[1, 6, 0, 0]\n401060000 《唐本草》 None\nopen 1\nclosing 1\n4\n[1, 7]\n[1, 7, 0, 0]\n401070000 《药总诀》 None\nopen 1\nclosing 1\n4\n[1, 8]\n[1, 8, 0, 0]\n401080000 《药性本草》 None\nopen 1\nclosing 1\n4\n[1, 9]\n[1, 9, 0, 0]\n401090000 《食疗本草》 None\nopen 1\nclosing 1\n4\n[1, 10]\n[1, 10, 0, 0]\n401100000 《本草拾遗》 None\nopen 1\nclosing 1\n4\n[1, 11]\n[1, 11, 0, 0]\n401110000 《海药本草》 None\nopen 1\nclosing 1\n4\n[1, 12]\n[1, 12, 0, 0]\n401120000 《删繁本草》 None\nopen 1\nclosing 1\n4\n[1, 13]\n[1, 13, 0, 0]\n401130000 《食性本草》 None\nopen 1\nclosing 1\n4\n[1, 14]\n[1, 14, 0, 0]\n401140000 《蜀本草》 None\nopen 1\nclosing 1\n4\n[1, 15]\n[1, 15, 0, 0]\n401150000 《开宝本草》 None\nopen 1\nclosing 1\n4\n[1, 16]\n[1, 16, 0, 0]\n401160000 《嘉补注本草》 None\nopen 1\nclosing 1\n4\n[1, 17]\n[1, 17, 0, 0]\n401170000 《图经本草》 None\nopen 1\nclosing 1\n4\n[1, 18]\n[1, 18, 0, 0]\n401180000 《证类本草》 None\nopen 1\nclosing 1\n4\n[1, 19]\n[1, 19, 0, 0]\n401190000 《本草别说》 None\nopen 1\nclosing 1\n4\n[1, 20]\n[1, 20, 0, 0]\n401200000 《日华诸家本草》 None\nopen 1\nclosing 1\n4\n[1, 21]\n[1, 21, 0, 0]\n401210000 《洁古珍珠囊》 None\nopen 1\nclosing 1\n4\n[1, 22]\n[1, 22, 0, 0]\n401220000 《日用本草》 None\nopen 1\nclosing 1\n4\n[1, 23]\n[1, 23, 0, 0]\n401230000 《本草歌括》 None\nopen 1\nclosing 1\n4\n[1, 24]\n[1, 24, 0, 0]\n401240000 《本草衍义补遗》 None\nopen 1\nclosing 1\n4\n[1, 25]\n[1, 25, 0, 0]\n401250000 《本草发挥》 None\nopen 1\nclosing 1\n4\n[1, 26]\n[1, 26, 0, 0]\n401260000 《救荒本草》 None\nopen 1\nclosing 1\n4\n[1, 27]\n[1, 27, 0, 0]\n401270000 《庚辛玉册》 None\nopen 1\nclosing 1\n4\n[1, 28]\n[1, 28, 0, 0]\n401280000 《本草集要》 None\nopen 1\nclosing 1\n4\n[1, 29]\n[1, 29, 0, 0]\n401290000 《食物本草》 None\nopen 1\nclosing 1\n4\n[1, 30]\n[1, 30, 0, 0]\n401300000 《食鉴本草》 None\nopen 1\nclosing 1\n4\n[1, 31]\n[1, 31, 0, 0]\n401310000 《本草会编》 None\nopen 1\nclosing 1\n4\n[1, 32]\n[1, 32, 0, 0]\n401320000 《本草纲目》 None\nclosing 0\nopen 0\nopen 1\nclosing 1\n4\n[2, 33]\n[2, 33, 0, 0]\n402330000 引据古今医家书目 None\nopen 1\nclosing 1\n4\n[2, 34]\n[2, 34, 0, 0]\n402340000 引据古今经史百家书目 None\nopen 1\nclosing 1\n4\n[2, 35]\n[2, 35, 0, 0]\n402350000 旧本所引者。 None\nclosing 0\nopen 0\nclosing 0\nopen 0\nopen 1\nclosing 1\n4\n[4, 36]\n[4, 36, 0, 0]\n404360000 上中下药 None\nopen 1\nclosing 1\n4\n[4, 37]\n[4, 37, 0, 0]\n404370000 editing notes None\nopen 1\nclosing 1\n4\n[4, 38]\n[4, 38, 0, 0]\n404380000 君臣佐使 None\nopen 1\nclosing 1\n4\n[4, 39]\n[4, 39, 0, 0]\n404390000 气味application None\nopen 1\nclosing 1\n4\n[4, 40]\n[4, 40, 0, 0]\n404400000 阴阳配合 None\nopen 1\nclosing 1\n4\n[4, 41]\n[4, 41, 0, 0]\n404410000 根茎花实 None\nopen 1\nclosing 1\n4\n[4, 42]\n[4, 42, 0, 0]\n404420000 七情 None\nopen 1\nclosing 1\n4\n[4, 43]\n[4, 43, 0, 0]\n404430000 五味四气. None\nopen 1\nclosing 1\n4\n[4, 44]\n[4, 44, 0, 0]\n404440000 chronical and acute None\nclosing 0\nopen 0\nopen 1\nclosing 1\n4\n[5, 45]\n[5, 45, 0, 0]\n405450000 采造生熟 None\nclosing 0\nopen 0\nopen 1\nclosing 1\n4\n[6, 46]\n[6, 46, 0, 0]\n406460000 不治六失 None\nclosing 0\nopen 0\nopen 1\nclosing 1\n4\n[7, 47]\n[7, 47, 0, 0]\n407470000 variety None\nclosing 0\nopen 0\nopen 1\nclosing 1\n4\n[8, 48]\n[8, 48, 0, 0]\n408480000  None\nclosing 0\nopen 0\nopen 1\nclosing 1\n4\n[9, 49]\n[9, 49, 0, 0]\n409490000  None\nclosing 0\nopen 0\nopen 1\nclosing 1\n4\n[10, 50]\n[10, 50, 0, 0]\n410500000  None\nclosing 0\nopen 0\nopen 1\nclosing 1\n4\n[11, 51]\n[11, 51, 0, 0]\n411510000  None\nopen 1\nclosing 1\n4\n[11, 52]\n[11, 52, 0, 0]\n411520000 大方 None\nopen 1\nclosing 1\n4\n[11, 53]\n[11, 53, 0, 0]\n411530000 小方 None\nopen 1\nclosing 1\n4\n[11, 54]\n[11, 54, 0, 0]\n411540000 缓方 None\nopen 1\nclosing 1\n4\n[11, 55]\n[11, 55, 0, 0]\n411550000 急方 None\nopen 1\nclosing 1\n4\n[11, 56]\n[11, 56, 0, 0]\n411560000 奇方 None\nopen 1\nclosing 1\n4\n[11, 57]\n[11, 57, 0, 0]\n411570000 偶方 None\nopen 1\nclosing 1\n4\n[11, 58]\n[11, 58, 0, 0]\n411580000 复方 None\nclosing 0\nopen 0\nopen 1\nclosing 1\n4\n[12, 59]\n[12, 59, 0, 0]\n412590000 summary None\nopen 1\nclosing 1\n4\n[12, 60]\n[12, 60, 0, 0]\n412600000 宣剂 None\nopen 1\nclosing 1\n4\n[12, 61]\n[12, 61, 0, 0]\n412610000 通剂 None\nopen 1\nclosing 1\n4\n[12, 62]\n[12, 62, 0, 0]\n412620000 补剂 None\nopen 1\nclosing 1\n4\n[12, 63]\n[12, 63, 0, 0]\n412630000 泄剂 None\nopen 1\nclosing 1\n4\n[12, 64]\n[12, 64, 0, 0]\n412640000 轻剂 None\nopen 1\nclosing 1\n4\n[12, 65]\n[12, 65, 0, 0]\n412650000 重剂 None\nopen 1\nclosing 1\n4\n[12, 66]\n[12, 66, 0, 0]\n412660000 滑剂 None\nopen 1\nclosing 1\n4\n[12, 67]\n[12, 67, 0, 0]\n412670000 涩剂 None\nopen 1\nclosing 1\n4\n[12, 68]\n[12, 68, 0, 0]\n412680000 燥剂 None\nopen 1\nclosing 1\n4\n[12, 69]\n[12, 69, 0, 0]\n412690000 湿剂 None\nclosing 0\nopen 0\nopen 1\nSkip 2. Should be processed at the next level.\nSkip 2. Should be processed at the next level.\nSkip 2. Should be processed at the next level.\nclosing 1\n4\n[13, 70]\n[13, 70, 0, 0]\n413700000 summary None\nopen 1\nSkip 2. Should be processed at the next level.\nSkip 2. Should be processed at the next level.\nSkip 2. Should be processed at the next level.\nSkip 2. Should be processed at the next level.\nSkip 2. Should be processed at the next level.\nSkip 2. Should be processed at the next level.\nSkip 2. Should be processed at the next level.\nSkip 2. Should be processed at the next level.\nSkip 2. Should be processed at the next level.\nSkip 2. Should be processed at the next level.\nSkip 2. Should be processed at the next level.\nSkip 2. Should be processed at the next level.\nSkip 2. Should be processed at the next level.\nSkip 2. Should be processed at the next level.\nSkip 2. Should be processed at the next level.\nSkip 2. Should be processed at the next level.\nSkip 2. Should be processed at the next level.\nSkip 2. Should be processed at the next level.\nclosing 1\n4\n[13, 71]\n[13, 71, 0, 0]\n413710000 theories None\nclosing 0\nopen 0\nopen 1\nclosing 1\n4\n[14, 72]\n[14, 72, 0, 0]\n414720000 肝 None\nopen 1\nclosing 1\n4\n[14, 73]\n[14, 73, 0, 0]\n414730000 心 None\nopen 1\nclosing 1\n4\n[14, 74]\n[14, 74, 0, 0]\n414740000 脾 None\nopen 1\nclosing 1\n4\n[14, 75]\n[14, 75, 0, 0]\n414750000 肺 None\nopen 1\nclosing 1\n4\n[14, 76]\n[14, 76, 0, 0]\n414760000 肾 None\nopen 1\nclosing 1\n4\n[14, 77]\n[14, 77, 0, 0]\n414770000 命门 None\nopen 1\nclosing 1\n4\n[14, 78]\n[14, 78, 0, 0]\n414780000 三焦 None\nopen 1\nclosing 1\n4\n[14, 79]\n[14, 79, 0, 0]\n414790000 胆 None\nopen 1\nclosing 1\n4\n[14, 80]\n[14, 80, 0, 0]\n414800000 胃 None\nopen 1\nclosing 1\n4\n[14, 81]\n[14, 81, 0, 0]\n414810000 大肠 None\nopen 1\nclosing 1\n4\n[14, 82]\n[14, 82, 0, 0]\n414820000 小肠 None\nopen 1\nclosing 1\n4\n[14, 83]\n[14, 83, 0, 0]\n414830000 膀胱 None\nclosing 0\nopen 0\nopen 1\nclosing 1\n4\n[15, 84]\n[15, 84, 0, 0]\n415840000  None\nclosing 0\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1618699928621_192107703",
      "id": "paragraph_1618699928621_192107703",
      "dateCreated": "2021-04-17 15:52:08.622",
      "dateStarted": "2021-04-20 14:22:28.931",
      "dateFinished": "2021-04-20 14:22:30.866",
      "status": "FINISHED"
    },
    {
      "title": "xd (\u003cd...d\u003e)",
      "text": "\nimport codecs\nimport re\n#import psycopg2\n\nimport random\nimport string\nimport json\n\n\n# extract chapter title and tag if there is one \ndef parseTitleAndMeta(pattern, str):\n    #print(pattern)\n    #print(str)\n    temp \u003d re.match(pattern+\u0027(.*?)\u003c(.*)\u003e$\u0027, str)\n    if temp:\n        tl \u003d temp.group(1).strip()\n        tg \u003d temp.group(2).strip()\n        return (tl, tg)\n    \n    temp \u003d re.match(pattern+\u0027(.*?)$\u0027, str)\n    if temp:\n        tl \u003d re.sub(r\"\\s+\", \"\", temp.group(1))\n        return (tl, None)\n    return None        \n\n# a random string to make infobot ID more likely to be unique.    \ndef gen_random_string(length):\n    letters \u003d string.ascii_lowercase\n    result_str \u003d \u0027\u0027.join(random.choice(letters) for i in range(length))\n    return result_str\n\n\n#iFile \u003d z.input(\"iFile\")\niFile \u003d z.get(\"fileName\")\nins \u003d codecs.open(iFile, \"r\", encoding\u003d\"utf8\")\n\nvInclude \u003d False\n\nvChpNum \u003d getChpNum(iFile)\n#vId \u003d None\n#vParentId \u003d None\nvVer \u003d 0\nvVNum \u003d 0\nvTitleNTagD \u003d (\u0027\u0027, \u0027\u0027)\nvContent \u003d \"\"\n#vSource \u003d u\"《本草纲目》\"\noFileName \u003d \"\"\n\nemptyLnCnt \u003d 0\n\nfor line in ins:\n    #print(vSkip)\n    #skip the lines between \u003cx and x\u003e\n    if ( re.match(\u0027^d\u003e\u0027, line) ):\n        #title \u003d vSource + \"_\" + vTitleNTagD[0] \n        title \u003d vTitleNTagD[0] \n        #id \u003d vSource + \"_\" + vChpNum + \"_\" +  format(vVNum, \u002703\u0027) + \"_\"  \\\n        #    + gen_random_string(3)\n        seq \u003d genSeq(int(vChpNum), vVNum )\n        print(seq)\n        tg \u003d vTitleNTagD[1]\n        print(title)\n        #print(id)\n        print(tg)\n        print(vContent)\n        #cur.execute(sql, (vVNum, title, vSource, tg, vVer, vContent))\n        meta\u003dNone\n        if tg:\n            tg \u003d re.sub(\u0027^|$\u0027, \u0027\"\u0027, tg)\n            tg \u003d re.sub(\u0027([:,])\u0027, r\u0027\"\\1\"\u0027, tg)\n            print(tg)\n            #meta \u003d json.loads(\u0027{\u0027 + tg + \u0027}\u0027);\n            meta \u003d \u0027{\u0027 + tg + \u0027}\u0027;\n        print(meta)\n        saveDB(seq, title, meta, vContent)\n\n        vInclude \u003d False\n        vContent \u003d \"\"\n        continue\n    \n    if ( re.match(\u0027^\u003cd\u0027, line) ):\n        vVNum +\u003d 1\n        vInclude \u003d True\n        #oFileName \u003d \"03\" + \"_\" + str(chpNum).zfill(3) + \".txt\"\n        vTitleNTagD \u003d parseTitleAndMeta(\u0027^\u003cd\u0027, line)\n        continue\n    if ( re.match(\u0027^d\u003e\u0027, line) ):\n        vInclude \u003d False\n        continue\n\n    # anything belongs the lower level blocks are not to be included here.\n    if ( re.match(\u0027^\u003cb[012]\u0027, line) ): \n        vInclude \u003d False\n        continue\n    if ( re.match(\u0027^b[01]\u003e\u0027, line) ): \n        vInclude \u003d True\n        continue\n\n    if ( vInclude ):\n        if(re.match(\u0027^$\u0027, line)):\n            emptyLnCnt +\u003d 1\n        else:\n            emptyLnCnt \u003d 0\n        if (emptyLnCnt \u003e 2):\n            continue\n        \n        vContent \u003d vContent + line\n\n#conn.commit()\n#cur.close()\n#conn.close()",
      "user": "anonymous",
      "dateUpdated": "2021-04-20 12:14:06.083",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "lineNumbers": false,
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {
          "iFile": "/home/celine/SHARED/LinuxWS/ZhongYi/bencaoganmu/Data/viEdited/02prefix_2.txt"
        },
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1603145541708_145726727",
      "id": "paragraph_1603145541708_145726727",
      "dateCreated": "2020-10-19 15:12:21.708",
      "dateStarted": "2021-04-16 21:06:19.993",
      "dateFinished": "2021-04-16 21:06:20.640",
      "status": "FINISHED"
    },
    {
      "title": "xb[01] (\u003cbn ... nb\u003e)",
      "text": "import codecs\nimport re\nimport psycopg2\n\nimport random\nimport string\n\n## extrac chapter number from file name, which is to be used in the infobot name\n#def getChpNum(fileName):\n#    nParts \u003d fileName.rsplit(\u0027/\u0027,1)\n#    chpN \u003d nParts[1]\n#    return chpN[:2]\n a random string to make infobot ID more likely to be unique.    \ndef gen_random_string(length):\n    letters \u003d string.ascii_lowercase\n    result_str \u003d \u0027\u0027.join(random.choice(letters) for i in range(length))\n    return result_str\n\n# extract chapter title and tag if there is one \n#def parseTitleAndTag(pattern, str):\n#    #print(pattern)\n#    #print(str)\n#    temp \u003d re.match(pattern+\u0027(.*?)tag:(.*)$\u0027, str)\n#    #print(temp)\n#    if temp:\n#        tl \u003d temp.group(1).strip()\n#        tg \u003d temp.group(2).strip()\n#        #print(tl, tg)\n#        return (tl, tg)\n#    \n#    temp \u003d re.match(pattern+\u0027(.*?)$\u0027, str)\n#    if temp:\n#        tl \u003d re.sub(r\"\\s+\", \"\", temp.group(1))\n#        return (tl, None)\n#\n#    return None        \n    \n\n# infobots are to be stored in a database, to be furtuer parsed into finer infobot    \n#conn \u003d psycopg2.connect(database\u003d\"notes\", user\u003d\"postgres\", password\u003d\"post\", host\u003d\"127.0.0.1\", port\u003d\"5432\")\n#print(\"Database opened successfully\")\n#cur \u003d conn.cursor()\n#sql \u003d \"\"\"INSERT INTO infobot(id, title, source, tags, version, content)\n#        VALUES(%s, %s, %s, %s, %s, %s) ;\"\"\"\n\n\n#iFile \u003d z.input(\"iFile\")\niFile \u003d z.get(\"fileName\")\nins \u003d codecs.open(iFile, \"r\", encoding\u003d\"utf8\")\n\nvInclude \u003d False\n\nvChpNum \u003d getChpNum(iFile)\n#vId \u003d None\n#vParentId \u003d None\nvVer \u003d 0\nvVNum \u003d 0\nvBNum \u003d 0\nvTitleNTagD \u003d (\u0027\u0027, \u0027\u0027)\nvTitleNTagB \u003d (\u0027\u0027, \u0027\u0027)\nvContent \u003d \"\"\nvSource \u003d u\"《本草纲目》\"\noFileName \u003d \"\"\n\nemptyLnCnt \u003d 0\n\nfor line in ins:\n    #print(vSkip)\n    #skip the lines between \u003cx and x\u003e\n    if ( re.match(\u0027^d\u003e\u0027, line) ):\n        vInclude \u003d False\n        vBNum \u003d 0   #reset block number\n        continue\n    \n    if ( re.match(\u0027^\u003cd\u0027, line) ):\n        vVNum +\u003d 1\n        vTitleNTagD \u003d parseTitleAndTag(\u0027^\u003cd\u0027, line)\n        continue\n\n    # b2 blocks are excluded here.\n    if ( re.match(\u0027^\u003cb2\u0027, line) ):\n        vInclude \u003d False\n        continue\n    if ( re.match(\u0027^b2\u003e\u0027, line) ): \n        vInclude \u003d True\n        continue\n\n\n    # extract b0 or b1\n    if ( re.match(\u0027^\u003cb[01]\u0027, line) ): \n        vInclude \u003d True\n        vBNum +\u003d 1\n        vTitleNTagB \u003d parseTitleAndTag(\u0027^\u003cb[01]\u0027, line)\n        continue\n    if ( re.match(\u0027^b[01]\u003e\u0027, line) ): \n        title \u003d vSource + \"_\" + vTitleNTagD[0] + \"_\" + vTitleNTagB[0] \n        id \u003d vSource + \"_\" + vChpNum + \"_\" +  format(vVNum, \u002703\u0027) + \"_\"  \\\n            +  format(vBNum, \u002703\u0027) + \"_\" + gen_random_string(3)\n        tg \u003d vTitleNTagB[1]\n        print(title)\n        print(id)\n        print(tg)\n        print(vContent)\n        #cur.execute(sql, (id, title, vSource, tg, vVer, vContent))\n        saveDB(seq, title, meta, vContent)\n        \n        vInclude \u003d False\n        vContent \u003d \"\"\n        continue\n    \n    if ( vInclude ):\n        if(re.match(\u0027^$\u0027, line)):\n            emptyLnCnt +\u003d 1\n        else:\n            emptyLnCnt \u003d 0\n        if (emptyLnCnt \u003e 2):\n            continue\n        vContent \u003d vContent + line\n\n#conn.commit()\n#cur.close()\n#conn.close()",
      "user": "anonymous",
      "dateUpdated": "2021-04-20 12:14:36.475",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "lineNumbers": true,
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {
          "iFile": "/home/celine/SHARED/LinuxWS/ZhongYi/bencaoganmu/Data/viEdited/02prefix_2.txt"
        },
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1603150517284_939972994",
      "id": "paragraph_1603150517284_939972994",
      "dateCreated": "2020-10-19 16:35:17.284",
      "dateStarted": "2021-04-16 21:06:46.337",
      "dateFinished": "2021-04-16 21:06:47.311",
      "status": "FINISHED"
    },
    {
      "title": "xb2 ",
      "text": "import codecs\nimport re\nimport psycopg2\n\nimport random\nimport string\n\n# extrac chapter number from file name, which is to be used in the infobot name\ndef getChpNum(fileName):\n    nParts \u003d fileName.rsplit(\u0027/\u0027,1)\n    chpN \u003d nParts[1]\n    return chpN[:2]\n# a random string to make infobot ID more likely to be unique.    \ndef gen_random_string(length):\n    letters \u003d string.ascii_lowercase\n    result_str \u003d \u0027\u0027.join(random.choice(letters) for i in range(length))\n    return result_str\n\n## extract chapter title and tag if there is one \n#def parseTitleAndTag(pattern, str):\n#    #print(pattern)\n#    #print(str)\n#    temp \u003d re.match(pattern+\u0027(.*?)tag:(.*)$\u0027, str)\n#    #print(temp)\n#    if temp:\n#        tl \u003d temp.group(1).strip()\n#        tg \u003d temp.group(2).strip()\n#        #print(tl, tg)\n#        return (tl, tg)\n#    \n#    temp \u003d re.match(pattern+\u0027(.*?)$\u0027, str)\n#    if temp:\n#        tl \u003d re.sub(r\"\\s+\", \"\", temp.group(1))\n#        return (tl, None)\n#\n#    return None        \n\n# infobots are to be stored in a database, to be furtuer parsed into finer infobot    \nconn \u003d psycopg2.connect(database\u003d\"notes\", user\u003d\"postgres\", password\u003d\"post\", host\u003d\"127.0.0.1\", port\u003d\"5432\")\n#print(\"Database opened successfully\")\ncur \u003d conn.cursor()\nsql \u003d \"\"\"INSERT INTO infobot(id, title, source, tags, version, content)\n        VALUES(%s, %s, %s, %s, %s, %s) ;\"\"\"\n\n\n#iFile \u003d z.input(\"iFile\")\niFile \u003d z.get(\"fileName\")\nins \u003d codecs.open(iFile, \"r\", encoding\u003d\"utf8\")\n\nvInclude \u003d False\n\nvChpNum \u003d getChpNum(iFile)\n#vId \u003d None\n#vParentId \u003d None\nvVer \u003d 0\nvVNum \u003d 0\nvBNum \u003d 0\nvB2Num \u003d 0\nvTitleNTagD \u003d (\u0027\u0027,\u0027\u0027)\nvTitleNTagB  \u003d (\u0027\u0027,\u0027\u0027)\nvTitleNTagB2  \u003d (\u0027\u0027,\u0027\u0027)\nvContent \u003d \"\"\nvSource \u003d u\"《本草纲目》\"\noFileName \u003d \"\"\n\nemptyLnCnt \u003d 0\n\nfor line in ins:\n    #print(vSkip)\n    #skip the lines between \u003cx and x\u003e\n    if ( re.match(\u0027^d\u003e\u0027, line) ):\n        vInclude \u003d False\n        vBNum \u003d 0   #reset block number\n        continue\n    \n    if ( re.match(\u0027^\u003cd\u0027, line) ):\n        vVNum +\u003d 1\n        #oFileName \u003d \"03\" + \"_\" + str(chpNum).zfill(3) + \".txt\"\n        vTitleNTagD \u003d parseTitleAndTag(\u0027^\u003cd\u0027, line)\n        continue\n\n    # anything belongs the lower level blocks are not to be included here.\n    if ( re.match(\u0027^\u003cb[01]\u0027, line) ): \n        vInclude \u003d False\n        vBNum +\u003d 1\n        vTitleNTagB \u003d parseTitleAndTag(\u0027^\u003cb[01]\u0027, line)\n        continue\n    if ( re.match(\u0027^b[01]\u003e\u0027, line) ): \n        vB2Num \u003d 0   #reset child level block number\n        continue\n\n    # anything belongs to \u003cb2 ... b2\u003e blocks are not to be included here.\n    if ( re.match(\u0027^\u003cb2\u0027, line) ): \n        vInclude \u003d True\n        vB2Num +\u003d 1\n        vTitleNTagB2 \u003d parseTitleAndTag(\u0027^\u003cb2\u0027, line)\n        continue\n    if ( re.match(\u0027^b2\u003e\u0027, line) ): \n        title \u003d vSource + \"_\" + vTitleNTagD[0] + \"_\" + vTitleNTagB[0] + \"_\" + vTitleNTagB2[0] \n        id \u003d vSource + \"_\" + vChpNum \\\n            + \"_\" +  format(vVNum, \u002703\u0027)  \\\n            + \"_\" + format(vBNum, \u002703\u0027)   \\\n            + \"_\" + format(vB2Num, \u002703\u0027) + \"_\" + gen_random_string(3)\n        tg \u003d vTitleNTagB2[1]\n        print(title)\n        print(id)\n        print(tg)\n        print(vContent)\n        cur.execute(sql, (id, title, vSource, tg, vVer, vContent))\n\n        vInclude \u003d False\n        vContent \u003d \"\"\n        continue\n\n    \n    if ( vInclude ):\n        if(re.match(\u0027^$\u0027, line)):\n            emptyLnCnt +\u003d 1\n        else:\n            emptyLnCnt \u003d 0\n        if (emptyLnCnt \u003e 2):\n            continue\n        vContent \u003d vContent + line\n\nconn.commit()\ncur.close()\nconn.close()",
      "user": "anonymous",
      "dateUpdated": "2021-04-20 12:14:59.976",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "lineNumbers": true,
        "title": true,
        "editorHide": true,
        "tableHide": true
      },
      "settings": {
        "params": {
          "iFile": "/home/celine/SHARED/LinuxWS/ZhongYi/bencaoganmu/Data/viEdited/02prefix_2.txt"
        },
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1603163681826_1071893464",
      "id": "paragraph_1603163681826_1071893464",
      "dateCreated": "2020-10-19 20:14:41.826",
      "dateStarted": "2021-04-15 20:17:15.664",
      "dateFinished": "2021-04-15 20:17:15.778",
      "status": "FINISHED"
    }
  ],
  "name": "splitBCGM",
  "id": "2FKNG5PMR",
  "defaultInterpreterGroup": "python",
  "version": "0.9.0-preview2",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}