{
  "paragraphs": [
    {
      "title": "input File",
      "text": "iFile \u003d z.input(\"iFile\")\nz.put(\"fileName\", iFile)",
      "user": "anonymous",
      "dateUpdated": "2020-12-08 21:31:01.793",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {
          "iFile": "/home/celine/SHARED/LinuxWS/ZhongYi/bencaoganmu/Data/viEdited/08mynotes_1.txt"
        },
        "forms": {
          "iFile": {
            "type": "TextBox",
            "name": "iFile",
            "displayName": "iFile",
            "defaultValue": "",
            "hidden": false
          }
        }
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1604093612573_1209585539",
      "id": "paragraph_1604093612573_1209585539",
      "dateCreated": "2020-10-30 14:33:32.573",
      "dateStarted": "2020-12-08 21:31:01.807",
      "dateFinished": "2020-12-08 21:31:01.832",
      "status": "FINISHED"
    },
    {
      "title": "xd (\u003cd ... d\u003e)",
      "text": "\nimport codecs\nimport re\nimport psycopg2\n\nimport random\nimport string\n\n# extrac chapter number from file name, which is to be used in the infobot name\ndef getChpNum(fileName):\n    nParts \u003d fileName.rsplit(\u0027/\u0027,1)\n    chpN \u003d nParts[1]\n    return chpN[:2]\n# a random string to make infobot ID more likely to be unique.    \ndef gen_random_string(length):\n    letters \u003d string.ascii_lowercase\n    result_str \u003d \u0027\u0027.join(random.choice(letters) for i in range(length))\n    return result_str\n\n# extract chapter title and tag if there is one \ndef parseTitleAndTag(pattern, str):\n    #print(pattern)\n    #print(str)\n    temp \u003d re.match(pattern+\u0027(.*?)tag:(.*)$\u0027, str)\n    if temp:\n        tl \u003d temp.group(1).strip()\n        tg \u003d temp.group(2).strip()\n        return (tl, tg)\n    \n    temp \u003d re.match(pattern+\u0027(.*?)$\u0027, str)\n    if temp:\n        tl \u003d re.sub(r\"\\s+\", \"\", temp.group(1))\n        return (tl, None)\n\n    return None        \n    \n\n# infobots are to be stored in a database, to be furtuer parsed into finer infobot    \nconn \u003d psycopg2.connect(database\u003d\"notes\", user\u003d\"postgres\", password\u003d\"post\", host\u003d\"127.0.0.1\", port\u003d\"5432\")\n#print(\"Database opened successfully\")\ncur \u003d conn.cursor()\nsql \u003d \"\"\"INSERT INTO infobot(id, title, source, tags, version, content)\n        VALUES(%s, %s, %s, %s, %s, %s) ;\"\"\"\n\n#iFile \u003d z.input(\"iFile\")\niFile \u003d z.get(\"fileName\")\nins \u003d codecs.open(iFile, \"r\", encoding\u003d\"utf8\")\n\nvInclude \u003d False\n\nvChpNum \u003d getChpNum(iFile)\n#vId \u003d None\n#vParentId \u003d None\nvVer \u003d 0\nvVNum \u003d 0\nvTitleNTagD \u003d (\u0027\u0027, \u0027\u0027)\nvContent \u003d \"\"\nvSource \u003d u\"《本草纲目》\"\noFileName \u003d \"\"\n\nemptyLnCnt \u003d 0\n\nfor line in ins:\n    #print(vSkip)\n    #skip the lines between \u003cx and x\u003e\n    if ( re.match(\u0027^d\u003e\u0027, line) ):\n        title \u003d vSource + \"_\" + vTitleNTagD[0] \n        id \u003d vSource + \"_\" + vChpNum + \"_\" +  format(vVNum, \u002703\u0027) + \"_\"  \\\n            + gen_random_string(3)\n        tg \u003d vTitleNTagD[1]\n        print(title)\n        print(id)\n        print(tg)\n        print(vContent)\n        cur.execute(sql, (id, title, vSource, tg, vVer, vContent))\n\n        vInclude \u003d False\n        vContent \u003d \"\"\n        continue\n    \n    if ( re.match(\u0027^\u003cd\u0027, line) ):\n        vVNum +\u003d 1\n        vInclude \u003d True\n        #oFileName \u003d \"03\" + \"_\" + str(chpNum).zfill(3) + \".txt\"\n        vTitleNTagD \u003d parseTitleAndTag(\u0027^\u003cd\u0027, line)\n        continue\n    if ( re.match(\u0027^d\u003e\u0027, line) ):\n        vInclude \u003d False\n        continue\n\n    # anything belongs the lower level blocks are not to be included here.\n    if ( re.match(\u0027^\u003cb[012]\u0027, line) ): \n        vInclude \u003d False\n        continue\n    if ( re.match(\u0027^b[01]\u003e\u0027, line) ): \n        vInclude \u003d True\n        continue\n\n    if ( vInclude ):\n        if(re.match(\u0027^$\u0027, line)):\n            emptyLnCnt +\u003d 1\n        else:\n            emptyLnCnt \u003d 0\n        if (emptyLnCnt \u003e 2):\n            continue\n        \n        vContent \u003d vContent + line\n\nconn.commit()\ncur.close()\nconn.close()",
      "user": "anonymous",
      "dateUpdated": "2020-12-08 21:31:01.903",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "lineNumbers": true,
        "editorHide": false,
        "tableHide": false
      },
      "settings": {
        "params": {
          "iFile": "/home/celine/SHARED/LinuxWS/ZhongYi/bencaoganmu/Data/viEdited/02prefix_2.txt"
        },
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "《本草纲目》_mynotes\n《本草纲目》_08_001_wpd\nNone\n四气、五味、升降、浮沉寒、热\n五病（气病、血病、骨病、肉病、筋病）\n\n\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1603145541708_145726727",
      "id": "paragraph_1603145541708_145726727",
      "dateCreated": "2020-10-19 15:12:21.708",
      "dateStarted": "2020-12-08 21:31:01.909",
      "dateFinished": "2020-12-08 21:31:01.930",
      "status": "FINISHED"
    },
    {
      "title": "xb[01] (\u003cbn ... nb\u003e",
      "text": "import codecs\nimport re\nimport psycopg2\n\nimport random\nimport string\n\n# extrac chapter number from file name, which is to be used in the infobot name\ndef getChpNum(fileName):\n    nParts \u003d fileName.rsplit(\u0027/\u0027,1)\n    chpN \u003d nParts[1]\n    return chpN[:2]\n# a random string to make infobot ID more likely to be unique.    \ndef gen_random_string(length):\n    letters \u003d string.ascii_lowercase\n    result_str \u003d \u0027\u0027.join(random.choice(letters) for i in range(length))\n    return result_str\n\n# extract chapter title and tag if there is one \ndef parseTitleAndTag(pattern, str):\n    #print(pattern)\n    #print(str)\n    temp \u003d re.match(pattern+\u0027(.*?)tag:(.*)$\u0027, str)\n    #print(temp)\n    if temp:\n        tl \u003d temp.group(1).strip()\n        tg \u003d temp.group(2).strip()\n        #print(tl, tg)\n        return (tl, tg)\n    \n    temp \u003d re.match(pattern+\u0027(.*?)$\u0027, str)\n    if temp:\n        tl \u003d re.sub(r\"\\s+\", \"\", temp.group(1))\n        return (tl, None)\n\n    return None        \n    \n\n# infobots are to be stored in a database, to be furtuer parsed into finer infobot    \nconn \u003d psycopg2.connect(database\u003d\"notes\", user\u003d\"postgres\", password\u003d\"post\", host\u003d\"127.0.0.1\", port\u003d\"5432\")\n#print(\"Database opened successfully\")\ncur \u003d conn.cursor()\nsql \u003d \"\"\"INSERT INTO infobot(id, title, source, tags, version, content)\n        VALUES(%s, %s, %s, %s, %s, %s) ;\"\"\"\n\n\n#iFile \u003d z.input(\"iFile\")\niFile \u003d z.get(\"fileName\")\nins \u003d codecs.open(iFile, \"r\", encoding\u003d\"utf8\")\n\nvInclude \u003d False\n\nvChpNum \u003d getChpNum(iFile)\n#vId \u003d None\n#vParentId \u003d None\nvVer \u003d 0\nvVNum \u003d 0\nvBNum \u003d 0\nvTitleNTagD \u003d (\u0027\u0027, \u0027\u0027)\nvTitleNTagB \u003d (\u0027\u0027, \u0027\u0027)\nvContent \u003d \"\"\nvSource \u003d u\"《本草纲目》\"\noFileName \u003d \"\"\n\nemptyLnCnt \u003d 0\n\nfor line in ins:\n    #print(vSkip)\n    #skip the lines between \u003cx and x\u003e\n    if ( re.match(\u0027^d\u003e\u0027, line) ):\n        vInclude \u003d False\n        vBNum \u003d 0   #reset block number\n        continue\n    \n    if ( re.match(\u0027^\u003cd\u0027, line) ):\n        vVNum +\u003d 1\n        vTitleNTagD \u003d parseTitleAndTag(\u0027^\u003cd\u0027, line)\n        continue\n\n    # b2 blocks are excluded here.\n    if ( re.match(\u0027^\u003cb2\u0027, line) ):\n        vInclude \u003d False\n        continue\n    if ( re.match(\u0027^b2\u003e\u0027, line) ): \n        vInclude \u003d True\n        continue\n\n\n    # extract b0 or b1\n    if ( re.match(\u0027^\u003cb[01]\u0027, line) ): \n        vInclude \u003d True\n        vBNum +\u003d 1\n        vTitleNTagB \u003d parseTitleAndTag(\u0027^\u003cb[01]\u0027, line)\n        continue\n    if ( re.match(\u0027^b[01]\u003e\u0027, line) ): \n        title \u003d vSource + \"_\" + vTitleNTagD[0] + \"_\" + vTitleNTagB[0] \n        id \u003d vSource + \"_\" + vChpNum + \"_\" +  format(vVNum, \u002703\u0027) + \"_\"  \\\n            +  format(vBNum, \u002703\u0027) + \"_\" + gen_random_string(3)\n        tg \u003d vTitleNTagB[1]\n        print(title)\n        print(id)\n        print(tg)\n        print(vContent)\n        cur.execute(sql, (id, title, vSource, tg, vVer, vContent))\n        \n        vInclude \u003d False\n        vContent \u003d \"\"\n        continue\n    \n    if ( vInclude ):\n        if(re.match(\u0027^$\u0027, line)):\n            emptyLnCnt +\u003d 1\n        else:\n            emptyLnCnt \u003d 0\n        if (emptyLnCnt \u003e 2):\n            continue\n        vContent \u003d vContent + line\n\nconn.commit()\ncur.close()\nconn.close()",
      "user": "anonymous",
      "dateUpdated": "2020-12-08 21:31:02.007",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "lineNumbers": true,
        "editorHide": false,
        "tableHide": false
      },
      "settings": {
        "params": {
          "iFile": "/home/celine/SHARED/LinuxWS/ZhongYi/bencaoganmu/Data/viEdited/02prefix_2.txt"
        },
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "《本草纲目》_mynotes_五味:\n《本草纲目》_08_001_001_xuo\nNone\n酸、甜、苦、辣、咸\n\n《本草纲目》_mynotes_五脏:\n《本草纲目》_08_001_002_jdw\nNone\n肝属木，\n心属火，\n脾属土，\n肺属金，\n肾属水\n\n肝为经，胆为络，\n心为经，小肠为络，\n脾为经，胃为络\n肺为经，大肠为络，\n肾为经，膀胱为络\n\n《本草纲目》_mynotes_五行\n《本草纲目》_08_001_003_yey\nNone\n木生火，\n火生土，\n土生金，\n金生水，\n水生木。\n在五脏里边就是说肝好－心就好，心好－脾就好，脾好－肺好，肺好－肾好，肾好－肝更好。\n\n木克土，\n土克水，\n水克火，\n火克金，\n金克木。\n在五脏里就是肝不好克脾，肝是帮助胆分泌胆汁儿的，肝功能不好时，立即对脾有一个坏影响，使食欲减退，厌油腻，腹胀，胃胀，所以肝大脾就大。...\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1603150517284_939972994",
      "id": "paragraph_1603150517284_939972994",
      "dateCreated": "2020-10-19 16:35:17.284",
      "dateStarted": "2020-12-08 21:31:02.013",
      "dateFinished": "2020-12-08 21:31:02.044",
      "status": "FINISHED"
    },
    {
      "title": "xb2 ",
      "text": "import codecs\nimport re\nimport psycopg2\n\nimport random\nimport string\n\n# extrac chapter number from file name, which is to be used in the infobot name\ndef getChpNum(fileName):\n    nParts \u003d fileName.rsplit(\u0027/\u0027,1)\n    chpN \u003d nParts[1]\n    return chpN[:2]\n# a random string to make infobot ID more likely to be unique.    \ndef gen_random_string(length):\n    letters \u003d string.ascii_lowercase\n    result_str \u003d \u0027\u0027.join(random.choice(letters) for i in range(length))\n    return result_str\n\n# extract chapter title and tag if there is one \ndef parseTitleAndTag(pattern, str):\n    #print(pattern)\n    #print(str)\n    temp \u003d re.match(pattern+\u0027(.*?)tag:(.*)$\u0027, str)\n    #print(temp)\n    if temp:\n        tl \u003d temp.group(1).strip()\n        tg \u003d temp.group(2).strip()\n        #print(tl, tg)\n        return (tl, tg)\n    \n    temp \u003d re.match(pattern+\u0027(.*?)$\u0027, str)\n    if temp:\n        tl \u003d re.sub(r\"\\s+\", \"\", temp.group(1))\n        return (tl, None)\n\n    return None        \n    \n\n\n# infobots are to be stored in a database, to be furtuer parsed into finer infobot    \nconn \u003d psycopg2.connect(database\u003d\"notes\", user\u003d\"postgres\", password\u003d\"post\", host\u003d\"127.0.0.1\", port\u003d\"5432\")\n#print(\"Database opened successfully\")\ncur \u003d conn.cursor()\nsql \u003d \"\"\"INSERT INTO infobot(id, title, source, tags, version, content)\n        VALUES(%s, %s, %s, %s, %s, %s) ;\"\"\"\n\n\n#iFile \u003d z.input(\"iFile\")\niFile \u003d z.get(\"fileName\")\nins \u003d codecs.open(iFile, \"r\", encoding\u003d\"utf8\")\n\nvInclude \u003d False\n\nvChpNum \u003d getChpNum(iFile)\n#vId \u003d None\n#vParentId \u003d None\nvVer \u003d 0\nvVNum \u003d 0\nvBNum \u003d 0\nvB2Num \u003d 0\nvTitleNTagD \u003d (\u0027\u0027,\u0027\u0027)\nvTitleNTagB  \u003d (\u0027\u0027,\u0027\u0027)\nvTitleNTagB2  \u003d (\u0027\u0027,\u0027\u0027)\nvContent \u003d \"\"\nvSource \u003d u\"《本草纲目》\"\noFileName \u003d \"\"\n\nemptyLnCnt \u003d 0\n\nfor line in ins:\n    #print(vSkip)\n    #skip the lines between \u003cx and x\u003e\n    if ( re.match(\u0027^d\u003e\u0027, line) ):\n        vInclude \u003d False\n        vBNum \u003d 0   #reset block number\n        continue\n    \n    if ( re.match(\u0027^\u003cd\u0027, line) ):\n        vVNum +\u003d 1\n        #oFileName \u003d \"03\" + \"_\" + str(chpNum).zfill(3) + \".txt\"\n        vTitleNTagD \u003d parseTitleAndTag(\u0027^\u003cd\u0027, line)\n        continue\n\n    # anything belongs the lower level blocks are not to be included here.\n    if ( re.match(\u0027^\u003cb[01]\u0027, line) ): \n        vInclude \u003d False\n        vBNum +\u003d 1\n        vTitleNTagB \u003d parseTitleAndTag(\u0027^\u003cb[01]\u0027, line)\n        continue\n    if ( re.match(\u0027^b[01]\u003e\u0027, line) ): \n        vB2Num \u003d 0   #reset child level block number\n        continue\n\n    # anything belongs to \u003cb2 ... b2\u003e blocks are not to be included here.\n    if ( re.match(\u0027^\u003cb2\u0027, line) ): \n        vInclude \u003d True\n        vB2Num +\u003d 1\n        vTitleNTagB2 \u003d parseTitleAndTag(\u0027^\u003cb2\u0027, line)\n        continue\n    if ( re.match(\u0027^b2\u003e\u0027, line) ): \n        title \u003d vSource + \"_\" + vTitleNTagD[0] + \"_\" + vTitleNTagB[0] + \"_\" + vTitleNTagB2[0] \n        id \u003d vSource + \"_\" + vChpNum \\\n            + \"_\" +  format(vVNum, \u002703\u0027)  \\\n            + \"_\" + format(vBNum, \u002703\u0027)   \\\n            + \"_\" + format(vB2Num, \u002703\u0027) + \"_\" + gen_random_string(3)\n        tg \u003d vTitleNTagB2[1]\n        print(title)\n        print(id)\n        print(tg)\n        print(vContent)\n        cur.execute(sql, (id, title, vSource, tg, vVer, vContent))\n\n        vInclude \u003d False\n        vContent \u003d \"\"\n        continue\n\n    \n    if ( vInclude ):\n        if(re.match(\u0027^$\u0027, line)):\n            emptyLnCnt +\u003d 1\n        else:\n            emptyLnCnt \u003d 0\n        if (emptyLnCnt \u003e 2):\n            continue\n        vContent \u003d vContent + line\n\nconn.commit()\ncur.close()\nconn.close()",
      "user": "anonymous",
      "dateUpdated": "2020-12-08 21:31:02.112",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "lineNumbers": true,
        "title": true,
        "editorHide": false,
        "tableHide": false
      },
      "settings": {
        "params": {
          "iFile": "/home/celine/SHARED/LinuxWS/ZhongYi/bencaoganmu/Data/viEdited/02prefix_2.txt"
        },
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1603163681826_1071893464",
      "id": "paragraph_1603163681826_1071893464",
      "dateCreated": "2020-10-19 20:14:41.826",
      "dateStarted": "2020-12-08 21:31:02.115",
      "dateFinished": "2020-12-08 21:31:02.141",
      "status": "FINISHED"
    },
    {
      "user": "anonymous",
      "dateUpdated": "2020-12-08 21:31:02.215",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1604711745552_1621049074",
      "id": "paragraph_1604711745552_1621049074",
      "dateCreated": "2020-11-06 17:15:45.552",
      "status": "FINISHED"
    }
  ],
  "name": "splitBCGM",
  "id": "2FKNG5PMR",
  "defaultInterpreterGroup": "python",
  "version": "0.9.0-preview2",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {
    "isRunning": true
  }
}