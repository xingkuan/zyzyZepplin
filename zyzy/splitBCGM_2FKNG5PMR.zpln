{
  "paragraphs": [
    {
      "title": "create info_src record",
      "text": "import codecs\nimport re\nimport psycopg2\n\n# infobots are to be stored in a database, to be furtuer parsed into finer infobot    \nconn \u003d psycopg2.connect(database\u003d\"infostg\", user\u003d\"postgres\", password\u003d\"post\", host\u003d\"127.0.0.1\", port\u003d\"5432\")\n#print(\"Database opened successfully\")\ncur \u003d conn.cursor()\nsql \u003d \"\"\"INSERT INTO info_src(id, name, meta)\n        VALUES(1, \u0027本草纲目\u0027, \u0027{\"排版\":\"金陵版\",\"出版者\":\"人民卫生出版社\"}\u0027) ;\"\"\"\n\ncur.execute(sql)\n\nconn.commit()\ncur.close()\nconn.close()",
      "user": "anonymous",
      "dateUpdated": "2021-03-11 21:37:12.432",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "lineNumbers": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1615512547400_2066949364",
      "id": "paragraph_1615512547400_2066949364",
      "dateCreated": "2021-03-11 17:29:07.400",
      "dateStarted": "2021-03-11 17:44:40.422",
      "dateFinished": "2021-03-11 17:44:40.449",
      "status": "FINISHED"
    },
    {
      "title": "input File",
      "text": "iFile \u003d z.input(\"iFile\")\nz.put(\"fileName\", iFile)",
      "user": "anonymous",
      "dateUpdated": "2021-05-04 14:54:56.428",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "editorHide": true,
        "tableHide": true
      },
      "settings": {
        "params": {
          "iFile": "/home/celine/SHARED/LinuxWS/ZhongYi/bencaoganmu/Data/viEdited/35grain_4.txt"
        },
        "forms": {
          "iFile": {
            "type": "TextBox",
            "name": "iFile",
            "displayName": "iFile",
            "defaultValue": "",
            "hidden": false
          }
        }
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1604093612573_1209585539",
      "id": "paragraph_1604093612573_1209585539",
      "dateCreated": "2020-10-30 14:33:32.573",
      "dateStarted": "2021-05-04 14:54:56.437",
      "dateFinished": "2021-05-04 14:54:56.451",
      "status": "FINISHED"
    },
    {
      "title": "functions",
      "text": "import psycopg2\n\n# extrac chapter number from file name, which is to be used in the infobot name\ndef getChpNum(fileName):\n    nParts \u003d fileName.rsplit(\u0027/\u0027,1)\n    chpN \u003d nParts[1]    #eg: 02intro_1.txt\n    #print(chpN[0:2])        \n    return int(chpN[:2])    #  int(\u002702\u0027) \u003d\u003d\u003e2\n\n#For本草纲目,divide the info into 4 layers, and the id is constructed as\n#  chNum*1000000 + divNum*10000 + bNum*100 + b2Num\ndef genSeq(chNum, pathSpec):\n    seqs \u003d list(map(lambda x: int(x[\u0027sequence\u0027]), pathSpec))\n    print(seqs)\n    for i in range(len(seqs),4):\n        seqs.append(0)\n    print(seqs)\n    return chNum*1000000000 + seqs[0]*1000000 + seqs[1]*10000 + seqs[2]*100 + seqs[3]\n\ndef saveDB(seq, name, meta, content):\n    sql \u003d \"\"\"INSERT INTO info_stg(src_id, seq, name, meta, version, content)\n        VALUES(1, %s, %s, %s, 0, %s) ;\"\"\"\n    conn \u003d psycopg2.connect(database\u003d\"infostg\", user\u003d\"postgres\", password\u003d\"post\", host\u003d\"127.0.0.1\", port\u003d\"5432\")\n    cur \u003d conn.cursor()\n    cur.execute(sql, (seq, name, meta, content))\n    conn.commit()\n    cur.close()\n    conn.close()",
      "user": "anonymous",
      "dateUpdated": "2021-05-04 14:32:08.301",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "lineNumbers": true,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1615527580682_952640392",
      "id": "paragraph_1615527580682_952640392",
      "dateCreated": "2021-03-11 21:39:40.683",
      "dateStarted": "2021-05-04 14:32:08.332",
      "dateFinished": "2021-05-04 14:32:10.058",
      "status": "FINISHED"
    },
    {
      "title": "devel",
      "text": "import codecs\nimport re\nimport psycopg2\nimport json\n\nimport random\nimport string\n\n#iFile \u003d z.input(\"iFile\")\niFile \u003d z.get(\"fileName\")\nlevelTarget\u003d0\npath_spec\u003d[]\nlState\u003d-1  #-1: skip; 0: include; 1: begining; 2: ending\nvContent \u003d \"\"\nins\u003dNone\nvSource \u003d u\"《本草纲目》\"\noFileName \u003d \"\"\n\nemptyLnCnt \u003d 0\n\ndef initPathSpec(n):\n    global path_spec\n    path_spec.clear()\n    for i in range(n+1):\n        temp\u003d{\u0027title\u0027: \u0027\u0027,\n            #  \u0027status\u0027: 0,       #0: n/a; 1: skip, 2: include, 3: last line  \u003d\u003dline status is not part of this structure\n              \u0027sequence\u0027: 0,\n              \u0027meta\u0027:None,\n              \u0027isOpen\u0027: False}    #sequence\n        path_spec.append(temp)\n\n\ndef stage1(line):\n    global lState, path_spec, vContent\n    temp\u003dre.match(\u0027^\u003cb(\\d)(.*)$\u0027, line)   #tag is optional\n    if(temp):\n        #print(temp)\n        level \u003d int(temp.groups()[0])\n        if level \u003e levelTarget:\n            #print(\"Skip \"+ str(level)+\". Should be processed at the next level.\")\n            lState \u003d -1          #-1: skip;     0: include;       1: begining;         2: ending\n            return True\n        else:\n            title \u003d temp.groups()[1].strip()\n            meta \u003d None\n            temp1\u003dre.match(\"(.*)\u003c(.*)\u003e\", title)\n            if temp1:\n                title \u003d temp1.groups()[0].strip()\n                meta \u003d temp1.groups()[1].strip()\n            #print(level, title, tag)    \n            path_spec[level][\"title\"]\u003dtitle\n            path_spec[level][\"meta\"]\u003dmeta\n            path_spec[level][\"sequence\"] +\u003d1\n            if path_spec[level][\"isOpen\"]:\n                print(\"ERROR: looks like tag \"+str(level)+\"is open already!\")\n                print(line)\n                return False\n            print(\"open \"+str(level))\n            path_spec[level][\"isOpen\"]\u003dTrue\n            if (level\u003d\u003dlevelTarget):\n                lState\u003d1\n            else:   #parent changed, so reset the sequence number\n                for i in range(level+1, levelTarget+1):\n                    path_spec[i][\"sequence\"]\u003d0   \n            return True\n    temp\u003dre.match(\u0027b(\\d)\u003e\u0027, line)   #tag is optional\n    if(temp):\n        level \u003d int(temp.groups()[0])\n        if level \u003e levelTarget + 1:\n            return True\n        elif level \u003d\u003d levelTarget+1:  #this way, lines divided by childrens can be consolidated into a contigueous one\n            lState\u003d-2\n        else:\n            if not path_spec[level][\"isOpen\"]:\n                print(\"Error: perhaps missing open tag for this closing tag \" + str(level))\n                print(line)\n                return False\n            print(\"closing \"+str(level))\n            path_spec[level][\"isOpen\"]\u003dFalse\n            if(level\u003d\u003dlevelTarget):    \n                lState\u003d2\n            return True\n    #content line, just return\n    return True\n        \ndef stage2(line):\n    global lState, path_spec, vContent,emptyLnCnt\n    #print(lState)\n    if (lState\u003d\u003d-1):\n        return\n    elif (lState\u003d\u003d-2):\n        lState\u003d0\n\n    elif (lState\u003d\u003d0):\n        if(re.match(\u0027^$\u0027, line)):\n            emptyLnCnt +\u003d 1\n        else:\n            emptyLnCnt \u003d 0\n\n        if (emptyLnCnt \u003e 1):\n            return    # skip consective empty lines\n\n        vContent \u003d vContent + line\n    elif (lState\u003d\u003d1):\n        lState\u003d0\n        vContent \u003d \u0027\u0027\n    elif(lState\u003d\u003d2):\n        path_spec[levelTarget][\"isOpen\"]\u003dFalse\n        lState\u003d-1\n        saveXXX()\n\n    return\n\ndef saveXXX():\n    vSrcFileNum \u003d getChpNum(iFile)\n    #print(vSrcFileNum)\n    seq \u003d genSeq(vSrcFileNum, path_spec )\n    title\u003dpath_spec[levelTarget][\u0027title\u0027]\n    #if levelTarget\u003d\u003d0:\n    #    title \u003d path_spec[0][\u0027title\u0027]\n    #else:\n    for i in range(levelTarget-1, 0, -1):\n    #    title \u003d title+\u0027-\u003e\u0027+path_spec[i][\u0027title\u0027]\n        title \u003d path_spec[i][\u0027title\u0027]+\u0027-\u003e\u0027+title\n        print(title)\n    meta \u003d path_spec[levelTarget][\u0027meta\u0027]\n    #print(seq, title, meta)\n    #print(vContent)\n    saveDB(seq, title, meta, vContent)\n        \ndef mainOfSplit(target):\n    global levelTarget, ins, path_spec\n    \n    ins \u003d codecs.open(iFile, \"r\", encoding\u003d\"utf8\")\n\n    levelTarget\u003dtarget\n\n    for line in ins:\n        #print(line)\n        if not stage1(line):\n            break\n        #print(json.dumps(path_spec))\n        #print(lState)\n        stage2(line)\n    print(\"***completed level: \", target)\n    ins.close()\n    return\n\n### main ###\n#initPathSpec(i)\n#mainOfSplit(2)\ndepth\u003d4\nfor i in range(0, depth):\n    print(i)\n    initPathSpec(i)\n    #print(json.dumps(path_spec))\n    mainOfSplit(i)\n",
      "user": "anonymous",
      "dateUpdated": "2021-05-04 15:52:52.566",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "lineNumbers": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "0\nopen 0\nclosing 0\n[1]\n[1, 0, 0, 0]\nopen 0\nclosing 0\n[2]\n[2, 0, 0, 0]\nopen 0\nclosing 0\n[3]\n[3, 0, 0, 0]\n***completed level:  0\n1\nopen 0\nopen 1\nclosing 1\n[1, 1]\n[1, 1, 0, 0]\nopen 1\nclosing 1\n[1, 2]\n[1, 2, 0, 0]\nopen 1\nclosing 1\n[1, 3]\n[1, 3, 0, 0]\nopen 1\nclosing 1\n[1, 4]\n[1, 4, 0, 0]\nopen 1\nclosing 1\n[1, 5]\n[1, 5, 0, 0]\nopen 1\nclosing 1\n[1, 6]\n[1, 6, 0, 0]\nopen 1\nclosing 1\n[1, 7]\n[1, 7, 0, 0]\nopen 1\nclosing 1\n[1, 8]\n[1, 8, 0, 0]\nopen 1\nclosing 1\n[1, 9]\n[1, 9, 0, 0]\nopen 1\nclosing 1\n[1, 10]\n[1, 10, 0, 0]\nopen 1\nclosing 1\n[1, 11]\n[1, 11, 0, 0]\nopen 1\nclosing 1\n[1, 12]\n[1, 12, 0, 0]\nopen 1\nclosing 1\n[1, 13]\n[1, 13, 0, 0]\nopen 1\nclosing 1\n[1, 14]\n[1, 14, 0, 0]\nopen 1\nclosing 1\n[1, 15]\n[1, 15, 0, 0]\nopen 1\nclosing 1\n[1, 16]\n[1, 16, 0, 0]\nopen 1\nclosing 1\n[1, 17]\n[1, 17, 0, 0]\nopen 1\nclosing 1\n[1, 18]\n[1, 18, 0, 0]\nopen 1\nclosing 1\n[1, 19]\n[1, 19, 0, 0]\nopen 1\nclosing 1\n[1, 20]\n[1, 20, 0, 0]\nopen 1\nclosing 1\n[1, 21]\n[1, 21, 0, 0]\nopen 1\nclosing 1\n[1, 22]\n[1, 22, 0, 0]\nopen 1\nclosing 1\n[1, 23]\n[1, 23, 0, 0]\nopen 1\nclosing 1\n[1, 24]\n[1, 24, 0, 0]\nclosing 0\nopen 0\nopen 1\nclosing 1\n[2, 1]\n[2, 1, 0, 0]\nopen 1\nclosing 1\n[2, 2]\n[2, 2, 0, 0]\nopen 1\nclosing 1\n[2, 3]\n[2, 3, 0, 0]\nopen 1\nclosing 1\n[2, 4]\n[2, 4, 0, 0]\nopen 1\nclosing 1\n[2, 5]\n[2, 5, 0, 0]\nopen 1\nclosing 1\n[2, 6]\n[2, 6, 0, 0]\nopen 1\nclosing 1\n[2, 7]\n[2, 7, 0, 0]\nopen 1\nclosing 1\n[2, 8]\n[2, 8, 0, 0]\nopen 1\nclosing 1\n[2, 9]\n[2, 9, 0, 0]\nopen 1\nclosing 1\n[2, 10]\n[2, 10, 0, 0]\nopen 1\nclosing 1\n[2, 11]\n[2, 11, 0, 0]\nopen 1\nclosing 1\n[2, 12]\n[2, 12, 0, 0]\nopen 1\nclosing 1\n[2, 13]\n[2, 13, 0, 0]\nopen 1\nclosing 1\n[2, 14]\n[2, 14, 0, 0]\nopen 1\nclosing 1\n[2, 15]\n[2, 15, 0, 0]\nopen 1\nclosing 1\n[2, 16]\n[2, 16, 0, 0]\nopen 1\nclosing 1\n[2, 17]\n[2, 17, 0, 0]\nopen 1\nclosing 1\n[2, 18]\n[2, 18, 0, 0]\nopen 1\nclosing 1\n[2, 19]\n[2, 19, 0, 0]\nopen 1\nclosing 1\n[2, 20]\n[2, 20, 0, 0]\nopen 1\nclosing 1\n[2, 21]\n[2, 21, 0, 0]\nopen 1\nclosing 1\n[2, 22]\n[2, 22, 0, 0]\nopen 1\nclosing 1\n[2, 23]\n[2, 23, 0, 0]\nopen 1\nclosing 1\n[2, 24]\n[2, 24, 0, 0]\nopen 1\nclosing 1\n[2, 25]\n[2, 25, 0, 0]\nopen 1\nclosing 1\n[2, 26]\n[2, 26, 0, 0]\nopen 1\nclosing 1\n[2, 27]\n[2, 27, 0, 0]\nopen 1\nclosing 1\n[2, 28]\n[2, 28, 0, 0]\nopen 1\nclosing 1\n[2, 29]\n[2, 29, 0, 0]\nopen 1\nclosing 1\n[2, 30]\n[2, 30, 0, 0]\nopen 1\nclosing 1\n[2, 31]\n[2, 31, 0, 0]\nopen 1\nclosing 1\n[2, 32]\n[2, 32, 0, 0]\nopen 1\nclosing 1\n[2, 33]\n[2, 33, 0, 0]\nopen 1\nclosing 1\n[2, 34]\n[2, 34, 0, 0]\nopen 1\nclosing 1\n[2, 35]\n[2, 35, 0, 0]\nopen 1\nclosing 1\n[2, 36]\n[2, 36, 0, 0]\nopen 1\nclosing 1\n[2, 37]\n[2, 37, 0, 0]\nopen 1\nclosing 1\n[2, 38]\n[2, 38, 0, 0]\nopen 1\nclosing 1\n[2, 39]\n[2, 39, 0, 0]\nopen 1\nclosing 1\n[2, 40]\n[2, 40, 0, 0]\nopen 1\nclosing 1\n[2, 41]\n[2, 41, 0, 0]\nopen 1\nclosing 1\n[2, 42]\n[2, 42, 0, 0]\nopen 1\nclosing 1\n[2, 43]\n[2, 43, 0, 0]\nopen 1\nclosing 1\n[2, 44]\n[2, 44, 0, 0]\nopen 1\nclosing 1\n[2, 45]\n[2, 45, 0, 0]\nopen 1\nclosing 1\n[2, 46]\n[2, 46, 0, 0]\nopen 1\nclosing 1\n[2, 47]\n[2, 47, 0, 0]\nopen 1\nclosing 1\n[2, 48]\n[2, 48, 0, 0]\nopen 1\nclosing 1\n[2, 49]\n[2, 49, 0, 0]\nopen 1\nclosing 1\n[2, 50]\n[2, 50, 0, 0]\nopen 1\nclosing 1\n[2, 51]\n[2, 51, 0, 0]\nopen 1\nclosing 1\n[2, 52]\n[2, 52, 0, 0]\nopen 1\nclosing 1\n[2, 53]\n[2, 53, 0, 0]\nopen 1\nclosing 1\n[2, 54]\n[2, 54, 0, 0]\nopen 1\nclosing 1\n[2, 55]\n[2, 55, 0, 0]\nopen 1\nclosing 1\n[2, 56]\n[2, 56, 0, 0]\nopen 1\nclosing 1\n[2, 57]\n[2, 57, 0, 0]\nopen 1\nclosing 1\n[2, 58]\n[2, 58, 0, 0]\nopen 1\nclosing 1\n[2, 59]\n[2, 59, 0, 0]\nopen 1\nclosing 1\n[2, 60]\n[2, 60, 0, 0]\nopen 1\nclosing 1\n[2, 61]\n[2, 61, 0, 0]\nopen 1\nclosing 1\n[2, 62]\n[2, 62, 0, 0]\nopen 1\nclosing 1\n[2, 63]\n[2, 63, 0, 0]\nopen 1\nclosing 1\n[2, 64]\n[2, 64, 0, 0]\nopen 1\nclosing 1\n[2, 65]\n[2, 65, 0, 0]\nopen 1\nclosing 1\n[2, 66]\n[2, 66, 0, 0]\nopen 1\nclosing 1\n[2, 67]\n[2, 67, 0, 0]\nopen 1\nclosing 1\n[2, 68]\n[2, 68, 0, 0]\nopen 1\nclosing 1\n[2, 69]\n[2, 69, 0, 0]\nclosing 0\nopen 0\nopen 1\nclosing 1\n[3, 1]\n[3, 1, 0, 0]\nopen 1\nclosing 1\n[3, 2]\n[3, 2, 0, 0]\nopen 1\nclosing 1\n[3, 3]\n[3, 3, 0, 0]\nopen 1\nclosing 1\n[3, 4]\n[3, 4, 0, 0]\nopen 1\nclosing 1\n[3, 5]\n[3, 5, 0, 0]\nclosing 0\n***completed level:  1\n2\nopen 0\nopen 1\nopen 2\nclosing 2\n[1, 1, 1]\n[1, 1, 1, 0]\n大豆豉-\u003e淡豉\nopen 2\nclosing 2\n[1, 1, 2]\n[1, 1, 2, 0]\n大豆豉-\u003e蒲州豉\nclosing 1\nopen 1\nopen 2\nclosing 2\n[1, 2, 1]\n[1, 2, 1, 0]\n豆黄-\u003e豆腐\nclosing 1\nopen 1\nclosing 1\nopen 1\nopen 2\nclosing 2\n[1, 4, 1]\n[1, 4, 1, 0]\n饭-\u003e新炊饭\nopen 2\nclosing 2\n[1, 4, 2]\n[1, 4, 2, 0]\n饭-\u003e寒食饭\nopen 2\nclosing 2\n[1, 4, 3]\n[1, 4, 3, 0]\n饭-\u003e祀灶饭\nopen 2\nclosing 2\n[1, 4, 4]\n[1, 4, 4, 0]\n饭-\u003e盆边零饭\nopen 2\nclosing 2\n[1, 4, 5]\n[1, 4, 5, 0]\n饭-\u003e齿中残饭\nopen 2\nclosing 2\n[1, 4, 6]\n[1, 4, 6, 0]\n饭-\u003e飧饭\nopen 2\nclosing 2\n[1, 4, 7]\n[1, 4, 7, 0]\n饭-\u003e荷叶烧饭\nclosing 1\nopen 1\nclosing 1\nopen 1\nopen 2\nclosing 2\n[1, 6, 1]\n[1, 6, 1, 0]\n粥-\u003e小麦粥\nopen 2\nclosing 2\n[1, 6, 2]\n[1, 6, 2, 0]\n粥-\u003e寒食粥\nopen 2\nclosing 2\n[1, 6, 3]\n[1, 6, 3, 0]\n粥-\u003e糯米、秫米、黍、米粥\nopen 2\nclosing 2\n[1, 6, 4]\n[1, 6, 4, 0]\n粥-\u003e粳米、米、粟米、粱米粥\nopen 2\nclosing 2\n[1, 6, 5]\n[1, 6, 5, 0]\n粥-\u003e赤小豆粥\nopen 2\nclosing 2\n[1, 6, 6]\n[1, 6, 6, 0]\n粥-\u003e绿豆粥\nopen 2\nclosing 2\n[1, 6, 7]\n[1, 6, 7, 0]\n粥-\u003e御米粥\nopen 2\nclosing 2\n[1, 6, 8]\n[1, 6, 8, 0]\n粥-\u003e薏苡仁粥\nopen 2\nclosing 2\n[1, 6, 9]\n[1, 6, 9, 0]\n粥-\u003e莲子粉粥\nopen 2\nclosing 2\n[1, 6, 10]\n[1, 6, 10, 0]\n粥-\u003e芡实粉粥\nopen 2\nclosing 2\n[1, 6, 11]\n[1, 6, 11, 0]\n粥-\u003e菱实粉粥\nopen 2\nclosing 2\n[1, 6, 12]\n[1, 6, 12, 0]\n粥-\u003e栗子粥\nopen 2\nclosing 2\n[1, 6, 13]\n[1, 6, 13, 0]\n粥-\u003e薯蓣粥\nopen 2\nclosing 2\n[1, 6, 14]\n[1, 6, 14, 0]\n粥-\u003e芋粥\nopen 2\nclosing 2\n[1, 6, 15]\n[1, 6, 15, 0]\n粥-\u003e百合粉粥\nopen 2\nclosing 2\n[1, 6, 16]\n[1, 6, 16, 0]\n粥-\u003e萝卜粥\nopen 2\nclosing 2\n[1, 6, 17]\n[1, 6, 17, 0]\n粥-\u003e胡萝卜粥\nopen 2\nclosing 2\n[1, 6, 18]\n[1, 6, 18, 0]\n粥-\u003e马齿苋粥\nopen 2\nclosing 2\n[1, 6, 19]\n[1, 6, 19, 0]\n粥-\u003e油菜粥\nopen 2\nclosing 2\n[1, 6, 20]\n[1, 6, 20, 0]\n粥-\u003e菜粥\nopen 2\nclosing 2\n[1, 6, 21]\n[1, 6, 21, 0]\n粥-\u003e菠菜粥\nopen 2\nclosing 2\n[1, 6, 22]\n[1, 6, 22, 0]\n粥-\u003e荠菜粥\nopen 2\nclosing 2\n[1, 6, 23]\n[1, 6, 23, 0]\n粥-\u003e芹菜粥\nopen 2\nclosing 2\n[1, 6, 24]\n[1, 6, 24, 0]\n粥-\u003e芥菜粥\nopen 2\nclosing 2\n[1, 6, 25]\n[1, 6, 25, 0]\n粥-\u003e葵菜粥\nopen 2\nclosing 2\n[1, 6, 26]\n[1, 6, 26, 0]\n粥-\u003e韭菜粥\nopen 2\nclosing 2\n[1, 6, 27]\n[1, 6, 27, 0]\n粥-\u003e葱豉粥\nopen 2\nclosing 2\n[1, 6, 28]\n[1, 6, 28, 0]\n粥-\u003e茯苓粉粥\nopen 2\nclosing 2\n[1, 6, 29]\n[1, 6, 29, 0]\n粥-\u003e松子仁粥\nopen 2\nclosing 2\n[1, 6, 30]\n[1, 6, 30, 0]\n粥-\u003e酸枣仁粥\nopen 2\nclosing 2\n[1, 6, 31]\n[1, 6, 31, 0]\n粥-\u003e枸杞子粥\nopen 2\nclosing 2\n[1, 6, 32]\n[1, 6, 32, 0]\n粥-\u003e薤白粥\nopen 2\nclosing 2\n[1, 6, 33]\n[1, 6, 33, 0]\n粥-\u003e生姜粥\nopen 2\nclosing 2\n[1, 6, 34]\n[1, 6, 34, 0]\n粥-\u003e花椒粥\nopen 2\nclosing 2\n[1, 6, 35]\n[1, 6, 35, 0]\n粥-\u003e茴香粥\nopen 2\nclosing 2\n[1, 6, 36]\n[1, 6, 36, 0]\n粥-\u003e胡椒粥、茱萸粥、辣米粥\nopen 2\nclosing 2\n[1, 6, 37]\n[1, 6, 37, 0]\n粥-\u003e麻子粥、胡麻粥、郁李仁粥\nopen 2\nclosing 2\n[1, 6, 38]\n[1, 6, 38, 0]\n粥-\u003e苏子粥\nopen 2\nclosing 2\n[1, 6, 39]\n[1, 6, 39, 0]\n粥-\u003e竹叶汤粥\nopen 2\nclosing 2\n[1, 6, 40]\n[1, 6, 40, 0]\n粥-\u003e猪肾粥、羊肾粥、鹿肾粥\nopen 2\nclosing 2\n[1, 6, 41]\n[1, 6, 41, 0]\n粥-\u003e羊肝粥、鸡肝粥\nopen 2\nclosing 2\n[1, 6, 42]\n[1, 6, 42, 0]\n粥-\u003e羊汁粥、鸡汁粥\nopen 2\nclosing 2\n[1, 6, 43]\n[1, 6, 43, 0]\n粥-\u003e鸭汁粥、鲤鱼汁粥\nopen 2\nclosing 2\n[1, 6, 44]\n[1, 6, 44, 0]\n粥-\u003e牛乳粥\nopen 2\nclosing 2\n[1, 6, 45]\n[1, 6, 45, 0]\n粥-\u003e酥蜜粥\nopen 2\nclosing 2\n[1, 6, 46]\n[1, 6, 46, 0]\n粥-\u003e鹿角胶入粥食\nopen 2\nclosing 2\n[1, 6, 47]\n[1, 6, 47, 0]\n粥-\u003e炒面入粥\nopen 2\nclosing 2\n[1, 6, 48]\n[1, 6, 48, 0]\n粥-\u003e烧盐入粥\nclosing 1\nopen 1\nopen 2\nclosing 2\n[1, 7, 1]\n[1, 7, 1, 0]\nX尺沼切-\u003e米麦x\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nopen 2\nclosing 2\n[1, 14, 1]\n[1, 14, 1, 0]\n曲-\u003e小麦曲\nopen 2\nclosing 2\n[1, 14, 2]\n[1, 14, 2, 0]\n曲-\u003e大麦曲\nopen 2\nclosing 2\n[1, 14, 3]\n[1, 14, 3, 0]\n曲-\u003e面曲、米曲\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nopen 2\nclosing 2\n[1, 17, 1]\n[1, 17, 1, 0]\nyao米-\u003e粟yao\nopen 2\nclosing 2\n[1, 17, 2]\n[1, 17, 2, 0]\nyao米-\u003e稻yao\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nopen 2\nclosing 2\n[1, 23, 1]\n[1, 23, 1, 0]\n醋-\u003e米醋\nclosing 1\nopen 1\nopen 2\nclosing 2\n[1, 24, 1]\n[1, 24, 1, 0]\n酒-\u003e米酒\nopen 2\nclosing 2\n[1, 24, 2]\n[1, 24, 2, 0]\n酒-\u003e糟笋节中酒\nopen 2\nclosing 2\n[1, 24, 3]\n[1, 24, 3, 0]\n酒-\u003e东阳酒\nclosing 1\nclosing 0\nopen 0\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nclosing 0\nopen 0\nopen 1\nclosing 1\nopen 1\nopen 2\nclosing 2\n[3, 2, 1]\n[3, 2, 1, 0]\n葡萄酒-\u003e酿酒\nopen 2\nclosing 2\n[3, 2, 2]\n[3, 2, 2, 0]\n葡萄酒-\u003e烧酒\nclosing 1\nopen 1\nopen 2\nclosing 2\n[3, 3, 1]\n[3, 3, 1, 0]\n糟-\u003e酒糟\nopen 2\nclosing 2\n[3, 3, 2]\n[3, 3, 2, 0]\n糟-\u003e大麦醋糟\nopen 2\nclosing 2\n[3, 3, 3]\n[3, 3, 3, 0]\n糟-\u003e干饧糟\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nclosing 0\n***completed level:  2\n3\nopen 0\nopen 1\nopen 2\nclosing 2\nopen 2\nclosing 2\nclosing 1\nopen 1\nopen 2\nclosing 2\nclosing 1\nopen 1\nclosing 1\nopen 1\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nclosing 1\nopen 1\nclosing 1\nopen 1\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nclosing 1\nopen 1\nopen 2\nclosing 2\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nopen 2\nclosing 2\nopen 2\nclosing 2\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nopen 2\nclosing 2\nclosing 1\nopen 1\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nclosing 1\nclosing 0\nopen 0\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nclosing 0\nopen 0\nopen 1\nclosing 1\nopen 1\nopen 2\nclosing 2\nopen 2\nclosing 2\nclosing 1\nopen 1\nopen 2\nclosing 2\nopen 2\nclosing 2\nopen 2\nclosing 2\nclosing 1\nopen 1\nclosing 1\nopen 1\nclosing 1\nclosing 0\n***completed level:  3\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1618699928621_192107703",
      "id": "paragraph_1618699928621_192107703",
      "dateCreated": "2021-04-17 15:52:08.622",
      "dateStarted": "2021-05-04 15:52:52.588",
      "dateFinished": "2021-05-04 15:52:56.062",
      "status": "FINISHED"
    },
    {
      "title": "xd (\u003cd...d\u003e)",
      "text": "\nimport codecs\nimport re\n#import psycopg2\n\nimport random\nimport string\nimport json\n\n\n# extract chapter title and tag if there is one \ndef parseTitleAndMeta(pattern, str):\n    #print(pattern)\n    #print(str)\n    temp \u003d re.match(pattern+\u0027(.*?)\u003c(.*)\u003e$\u0027, str)\n    if temp:\n        tl \u003d temp.group(1).strip()\n        tg \u003d temp.group(2).strip()\n        return (tl, tg)\n    \n    temp \u003d re.match(pattern+\u0027(.*?)$\u0027, str)\n    if temp:\n        tl \u003d re.sub(r\"\\s+\", \"\", temp.group(1))\n        return (tl, None)\n    return None        \n\n# a random string to make infobot ID more likely to be unique.    \ndef gen_random_string(length):\n    letters \u003d string.ascii_lowercase\n    result_str \u003d \u0027\u0027.join(random.choice(letters) for i in range(length))\n    return result_str\n\n\n#iFile \u003d z.input(\"iFile\")\niFile \u003d z.get(\"fileName\")\nins \u003d codecs.open(iFile, \"r\", encoding\u003d\"utf8\")\n\nvInclude \u003d False\n\nvChpNum \u003d getChpNum(iFile)\n#vId \u003d None\n#vParentId \u003d None\nvVer \u003d 0\nvVNum \u003d 0\nvTitleNTagD \u003d (\u0027\u0027, \u0027\u0027)\nvContent \u003d \"\"\n#vSource \u003d u\"《本草纲目》\"\noFileName \u003d \"\"\n\nemptyLnCnt \u003d 0\n\nfor line in ins:\n    #print(vSkip)\n    #skip the lines between \u003cx and x\u003e\n    if ( re.match(\u0027^d\u003e\u0027, line) ):\n        #title \u003d vSource + \"_\" + vTitleNTagD[0] \n        title \u003d vTitleNTagD[0] \n        #id \u003d vSource + \"_\" + vChpNum + \"_\" +  format(vVNum, \u002703\u0027) + \"_\"  \\\n        #    + gen_random_string(3)\n        seq \u003d genSeq(int(vChpNum), vVNum )\n        print(seq)\n        tg \u003d vTitleNTagD[1]\n        print(title)\n        #print(id)\n        print(tg)\n        print(vContent)\n        #cur.execute(sql, (vVNum, title, vSource, tg, vVer, vContent))\n        meta\u003dNone\n        if tg:\n            tg \u003d re.sub(\u0027^|$\u0027, \u0027\"\u0027, tg)\n            tg \u003d re.sub(\u0027([:,])\u0027, r\u0027\"\\1\"\u0027, tg)\n            print(tg)\n            #meta \u003d json.loads(\u0027{\u0027 + tg + \u0027}\u0027);\n            meta \u003d \u0027{\u0027 + tg + \u0027}\u0027;\n        print(meta)\n        saveDB(seq, title, meta, vContent)\n\n        vInclude \u003d False\n        vContent \u003d \"\"\n        continue\n    \n    if ( re.match(\u0027^\u003cd\u0027, line) ):\n        vVNum +\u003d 1\n        vInclude \u003d True\n        #oFileName \u003d \"03\" + \"_\" + str(chpNum).zfill(3) + \".txt\"\n        vTitleNTagD \u003d parseTitleAndMeta(\u0027^\u003cd\u0027, line)\n        continue\n    if ( re.match(\u0027^d\u003e\u0027, line) ):\n        vInclude \u003d False\n        continue\n\n    # anything belongs the lower level blocks are not to be included here.\n    if ( re.match(\u0027^\u003cb[012]\u0027, line) ): \n        vInclude \u003d False\n        continue\n    if ( re.match(\u0027^b[01]\u003e\u0027, line) ): \n        vInclude \u003d True\n        continue\n\n    if ( vInclude ):\n        if(re.match(\u0027^$\u0027, line)):\n            emptyLnCnt +\u003d 1\n        else:\n            emptyLnCnt \u003d 0\n        if (emptyLnCnt \u003e 2):\n            continue\n        \n        vContent \u003d vContent + line\n\n#conn.commit()\n#cur.close()\n#conn.close()",
      "user": "anonymous",
      "dateUpdated": "2021-04-21 10:06:22.998",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "lineNumbers": false,
        "editorHide": true,
        "tableHide": true
      },
      "settings": {
        "params": {
          "iFile": "/home/celine/SHARED/LinuxWS/ZhongYi/bencaoganmu/Data/viEdited/02prefix_2.txt"
        },
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "Unexpected exception: java.lang.RuntimeException: java.lang.InterruptedException: sleep interrupted\n\tat org.apache.zeppelin.notebook.Paragraph.execute(Paragraph.java:353)\n\tat org.apache.zeppelin.notebook.Note.run(Note.java:857)\n\tat org.apache.zeppelin.service.NotebookService.runParagraph(NotebookService.java:356)\n\tat org.apache.zeppelin.service.NotebookService.runAllParagraphs(NotebookService.java:412)\n\tat org.apache.zeppelin.socket.NotebookServer.runAllParagraphs(NotebookServer.java:1486)\n\tat org.apache.zeppelin.socket.NotebookServer.onMessage(NotebookServer.java:357)\n\tat org.apache.zeppelin.socket.NotebookSocket.onWebSocketText(NotebookSocket.java:58)\n\tat org.eclipse.jetty.websocket.common.events.JettyListenerEventDriver.onTextMessage(JettyListenerEventDriver.java:231)\n\tat org.eclipse.jetty.websocket.common.message.SimpleTextMessage.messageComplete(SimpleTextMessage.java:69)\n\tat org.eclipse.jetty.websocket.common.events.AbstractEventDriver.appendMessage(AbstractEventDriver.java:65)\n\tat org.eclipse.jetty.websocket.common.events.JettyListenerEventDriver.onTextFrame(JettyListenerEventDriver.java:179)\n\tat org.eclipse.jetty.websocket.common.events.AbstractEventDriver.incomingFrame(AbstractEventDriver.java:150)\n\tat org.eclipse.jetty.websocket.common.WebSocketSession.incomingFrame(WebSocketSession.java:322)\n\tat org.eclipse.jetty.websocket.common.extensions.AbstractExtension.nextIncomingFrame(AbstractExtension.java:147)\n\tat org.eclipse.jetty.websocket.common.extensions.compress.PerMessageDeflateExtension.nextIncomingFrame(PerMessageDeflateExtension.java:112)\n\tat org.eclipse.jetty.websocket.common.extensions.compress.CompressExtension.forwardIncoming(CompressExtension.java:168)\n\tat org.eclipse.jetty.websocket.common.extensions.compress.PerMessageDeflateExtension.incomingFrame(PerMessageDeflateExtension.java:92)\n\tat org.eclipse.jetty.websocket.common.extensions.ExtensionStack.incomingFrame(ExtensionStack.java:202)\n\tat org.eclipse.jetty.websocket.common.Parser.notifyFrame(Parser.java:225)\n\tat org.eclipse.jetty.websocket.common.Parser.parseSingleFrame(Parser.java:259)\n\tat org.eclipse.jetty.websocket.common.io.AbstractWebSocketConnection.onFillable(AbstractWebSocketConnection.java:460)\n\tat org.eclipse.jetty.websocket.common.io.AbstractWebSocketConnection.onFillable(AbstractWebSocketConnection.java:441)\n\tat org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:311)\n\tat org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103)\n\tat org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:117)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:806)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:938)\n\tat java.base/java.lang.Thread.run(Thread.java:834)\nCaused by: java.lang.InterruptedException: sleep interrupted\n\tat java.base/java.lang.Thread.sleep(Native Method)\n\tat org.apache.zeppelin.notebook.Paragraph.execute(Paragraph.java:351)\n\t... 27 more\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1603145541708_145726727",
      "id": "paragraph_1603145541708_145726727",
      "dateCreated": "2020-10-19 15:12:21.708",
      "dateStarted": "2021-04-16 21:06:19.993",
      "dateFinished": "2021-04-16 21:06:20.640",
      "status": "ERROR"
    },
    {
      "title": "xb[01] (\u003cbn ... nb\u003e)",
      "text": "import codecs\nimport re\nimport psycopg2\n\nimport random\nimport string\n\n## extrac chapter number from file name, which is to be used in the infobot name\n#def getChpNum(fileName):\n#    nParts \u003d fileName.rsplit(\u0027/\u0027,1)\n#    chpN \u003d nParts[1]\n#    return chpN[:2]\n a random string to make infobot ID more likely to be unique.    \ndef gen_random_string(length):\n    letters \u003d string.ascii_lowercase\n    result_str \u003d \u0027\u0027.join(random.choice(letters) for i in range(length))\n    return result_str\n\n# extract chapter title and tag if there is one \n#def parseTitleAndTag(pattern, str):\n#    #print(pattern)\n#    #print(str)\n#    temp \u003d re.match(pattern+\u0027(.*?)tag:(.*)$\u0027, str)\n#    #print(temp)\n#    if temp:\n#        tl \u003d temp.group(1).strip()\n#        tg \u003d temp.group(2).strip()\n#        #print(tl, tg)\n#        return (tl, tg)\n#    \n#    temp \u003d re.match(pattern+\u0027(.*?)$\u0027, str)\n#    if temp:\n#        tl \u003d re.sub(r\"\\s+\", \"\", temp.group(1))\n#        return (tl, None)\n#\n#    return None        \n    \n\n# infobots are to be stored in a database, to be furtuer parsed into finer infobot    \n#conn \u003d psycopg2.connect(database\u003d\"notes\", user\u003d\"postgres\", password\u003d\"post\", host\u003d\"127.0.0.1\", port\u003d\"5432\")\n#print(\"Database opened successfully\")\n#cur \u003d conn.cursor()\n#sql \u003d \"\"\"INSERT INTO infobot(id, title, source, tags, version, content)\n#        VALUES(%s, %s, %s, %s, %s, %s) ;\"\"\"\n\n\n#iFile \u003d z.input(\"iFile\")\niFile \u003d z.get(\"fileName\")\nins \u003d codecs.open(iFile, \"r\", encoding\u003d\"utf8\")\n\nvInclude \u003d False\n\nvChpNum \u003d getChpNum(iFile)\n#vId \u003d None\n#vParentId \u003d None\nvVer \u003d 0\nvVNum \u003d 0\nvBNum \u003d 0\nvTitleNTagD \u003d (\u0027\u0027, \u0027\u0027)\nvTitleNTagB \u003d (\u0027\u0027, \u0027\u0027)\nvContent \u003d \"\"\nvSource \u003d u\"《本草纲目》\"\noFileName \u003d \"\"\n\nemptyLnCnt \u003d 0\n\nfor line in ins:\n    #print(vSkip)\n    #skip the lines between \u003cx and x\u003e\n    if ( re.match(\u0027^d\u003e\u0027, line) ):\n        vInclude \u003d False\n        vBNum \u003d 0   #reset block number\n        continue\n    \n    if ( re.match(\u0027^\u003cd\u0027, line) ):\n        vVNum +\u003d 1\n        vTitleNTagD \u003d parseTitleAndTag(\u0027^\u003cd\u0027, line)\n        continue\n\n    # b2 blocks are excluded here.\n    if ( re.match(\u0027^\u003cb2\u0027, line) ):\n        vInclude \u003d False\n        continue\n    if ( re.match(\u0027^b2\u003e\u0027, line) ): \n        vInclude \u003d True\n        continue\n\n\n    # extract b0 or b1\n    if ( re.match(\u0027^\u003cb[01]\u0027, line) ): \n        vInclude \u003d True\n        vBNum +\u003d 1\n        vTitleNTagB \u003d parseTitleAndTag(\u0027^\u003cb[01]\u0027, line)\n        continue\n    if ( re.match(\u0027^b[01]\u003e\u0027, line) ): \n        title \u003d vSource + \"_\" + vTitleNTagD[0] + \"_\" + vTitleNTagB[0] \n        id \u003d vSource + \"_\" + vChpNum + \"_\" +  format(vVNum, \u002703\u0027) + \"_\"  \\\n            +  format(vBNum, \u002703\u0027) + \"_\" + gen_random_string(3)\n        tg \u003d vTitleNTagB[1]\n        print(title)\n        print(id)\n        print(tg)\n        print(vContent)\n        #cur.execute(sql, (id, title, vSource, tg, vVer, vContent))\n        saveDB(seq, title, meta, vContent)\n        \n        vInclude \u003d False\n        vContent \u003d \"\"\n        continue\n    \n    if ( vInclude ):\n        if(re.match(\u0027^$\u0027, line)):\n            emptyLnCnt +\u003d 1\n        else:\n            emptyLnCnt \u003d 0\n        if (emptyLnCnt \u003e 2):\n            continue\n        vContent \u003d vContent + line\n\n#conn.commit()\n#cur.close()\n#conn.close()",
      "user": "anonymous",
      "dateUpdated": "2021-04-21 09:57:00.267",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "lineNumbers": true,
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {
          "iFile": "/home/celine/SHARED/LinuxWS/ZhongYi/bencaoganmu/Data/viEdited/02prefix_2.txt"
        },
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1603150517284_939972994",
      "id": "paragraph_1603150517284_939972994",
      "dateCreated": "2020-10-19 16:35:17.284",
      "dateStarted": "2021-04-16 21:06:46.337",
      "dateFinished": "2021-04-16 21:06:47.311",
      "status": "FINISHED"
    },
    {
      "title": "xb2 ",
      "text": "import codecs\nimport re\nimport psycopg2\n\nimport random\nimport string\n\n# extrac chapter number from file name, which is to be used in the infobot name\ndef getChpNum(fileName):\n    nParts \u003d fileName.rsplit(\u0027/\u0027,1)\n    chpN \u003d nParts[1]\n    return chpN[:2]\n# a random string to make infobot ID more likely to be unique.    \ndef gen_random_string(length):\n    letters \u003d string.ascii_lowercase\n    result_str \u003d \u0027\u0027.join(random.choice(letters) for i in range(length))\n    return result_str\n\n## extract chapter title and tag if there is one \n#def parseTitleAndTag(pattern, str):\n#    #print(pattern)\n#    #print(str)\n#    temp \u003d re.match(pattern+\u0027(.*?)tag:(.*)$\u0027, str)\n#    #print(temp)\n#    if temp:\n#        tl \u003d temp.group(1).strip()\n#        tg \u003d temp.group(2).strip()\n#        #print(tl, tg)\n#        return (tl, tg)\n#    \n#    temp \u003d re.match(pattern+\u0027(.*?)$\u0027, str)\n#    if temp:\n#        tl \u003d re.sub(r\"\\s+\", \"\", temp.group(1))\n#        return (tl, None)\n#\n#    return None        \n\n# infobots are to be stored in a database, to be furtuer parsed into finer infobot    \nconn \u003d psycopg2.connect(database\u003d\"notes\", user\u003d\"postgres\", password\u003d\"post\", host\u003d\"127.0.0.1\", port\u003d\"5432\")\n#print(\"Database opened successfully\")\ncur \u003d conn.cursor()\nsql \u003d \"\"\"INSERT INTO infobot(id, title, source, tags, version, content)\n        VALUES(%s, %s, %s, %s, %s, %s) ;\"\"\"\n\n\n#iFile \u003d z.input(\"iFile\")\niFile \u003d z.get(\"fileName\")\nins \u003d codecs.open(iFile, \"r\", encoding\u003d\"utf8\")\n\nvInclude \u003d False\n\nvChpNum \u003d getChpNum(iFile)\n#vId \u003d None\n#vParentId \u003d None\nvVer \u003d 0\nvVNum \u003d 0\nvBNum \u003d 0\nvB2Num \u003d 0\nvTitleNTagD \u003d (\u0027\u0027,\u0027\u0027)\nvTitleNTagB  \u003d (\u0027\u0027,\u0027\u0027)\nvTitleNTagB2  \u003d (\u0027\u0027,\u0027\u0027)\nvContent \u003d \"\"\nvSource \u003d u\"《本草纲目》\"\noFileName \u003d \"\"\n\nemptyLnCnt \u003d 0\n\nfor line in ins:\n    #print(vSkip)\n    #skip the lines between \u003cx and x\u003e\n    if ( re.match(\u0027^d\u003e\u0027, line) ):\n        vInclude \u003d False\n        vBNum \u003d 0   #reset block number\n        continue\n    \n    if ( re.match(\u0027^\u003cd\u0027, line) ):\n        vVNum +\u003d 1\n        #oFileName \u003d \"03\" + \"_\" + str(chpNum).zfill(3) + \".txt\"\n        vTitleNTagD \u003d parseTitleAndTag(\u0027^\u003cd\u0027, line)\n        continue\n\n    # anything belongs the lower level blocks are not to be included here.\n    if ( re.match(\u0027^\u003cb[01]\u0027, line) ): \n        vInclude \u003d False\n        vBNum +\u003d 1\n        vTitleNTagB \u003d parseTitleAndTag(\u0027^\u003cb[01]\u0027, line)\n        continue\n    if ( re.match(\u0027^b[01]\u003e\u0027, line) ): \n        vB2Num \u003d 0   #reset child level block number\n        continue\n\n    # anything belongs to \u003cb2 ... b2\u003e blocks are not to be included here.\n    if ( re.match(\u0027^\u003cb2\u0027, line) ): \n        vInclude \u003d True\n        vB2Num +\u003d 1\n        vTitleNTagB2 \u003d parseTitleAndTag(\u0027^\u003cb2\u0027, line)\n        continue\n    if ( re.match(\u0027^b2\u003e\u0027, line) ): \n        title \u003d vSource + \"_\" + vTitleNTagD[0] + \"_\" + vTitleNTagB[0] + \"_\" + vTitleNTagB2[0] \n        id \u003d vSource + \"_\" + vChpNum \\\n            + \"_\" +  format(vVNum, \u002703\u0027)  \\\n            + \"_\" + format(vBNum, \u002703\u0027)   \\\n            + \"_\" + format(vB2Num, \u002703\u0027) + \"_\" + gen_random_string(3)\n        tg \u003d vTitleNTagB2[1]\n        print(title)\n        print(id)\n        print(tg)\n        print(vContent)\n        cur.execute(sql, (id, title, vSource, tg, vVer, vContent))\n\n        vInclude \u003d False\n        vContent \u003d \"\"\n        continue\n\n    \n    if ( vInclude ):\n        if(re.match(\u0027^$\u0027, line)):\n            emptyLnCnt +\u003d 1\n        else:\n            emptyLnCnt \u003d 0\n        if (emptyLnCnt \u003e 2):\n            continue\n        vContent \u003d vContent + line\n\nconn.commit()\ncur.close()\nconn.close()",
      "user": "anonymous",
      "dateUpdated": "2021-04-20 12:14:59.976",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "lineNumbers": true,
        "title": true,
        "editorHide": true,
        "tableHide": true
      },
      "settings": {
        "params": {
          "iFile": "/home/celine/SHARED/LinuxWS/ZhongYi/bencaoganmu/Data/viEdited/02prefix_2.txt"
        },
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1603163681826_1071893464",
      "id": "paragraph_1603163681826_1071893464",
      "dateCreated": "2020-10-19 20:14:41.826",
      "dateStarted": "2021-04-15 20:17:15.664",
      "dateFinished": "2021-04-15 20:17:15.778",
      "status": "FINISHED"
    }
  ],
  "name": "splitBCGM",
  "id": "2FKNG5PMR",
  "defaultInterpreterGroup": "python",
  "version": "0.9.0-preview2",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}